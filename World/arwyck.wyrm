// Arwyck is the low-level hub town, and as such it hosts numerous vendors
// and trainers, along with a number of introductory quests to demonstrate
// different mechanics.
//
// In addition, some of the NPC dialogue starts to hint at the larger story arc,
// i.e. the disappearance of the gods and the troubles arising from that.
//
// Finally, the town has its own short quest arc involving a rash of thefts from
// various shops.

// General prototypes.

def rutted_path: portal {
    brief = "a rutted path"
}

def dirt_road: portal {
    brief = "a dirt road"
}

def narrow_path: portal {
    brief = "a narrow path"
}

def alley: portal {
    brief = "a narrow alley"
}

def cobbled_road: portal {
    brief = "a cobbled road"
}

// docks

def dock_location: location {
    domain = 'outdoor
    surface = 'wood
}

def stevedore: lib.npc {
    brief = "a surly stevedore"
    pose = "stares out to sea."
    description = "The man wears stained overalls and a sour frown."

    when talk(actor: .quest(isle_of_dawn.document_delivery, done), self, topic) {
        tell(self, actor) |
            Hey, thanks. I've been needin' those. Here's your coin! You'll be
            glad of it if you'll be visitin' the shops here in Arwyck. It's no
            bleedin' city, but you can find most of what you'll be needin' here
            in town.
        // FIXME: receive_items(actor, [lib.silver_coin], self)
        complete_quest(actor, isle_of_dawn.document_delivery)
    }

    when talk(actor, self, topic) {
        tell(self, actor) |
            Ah, to be sailing the Emerald Sea. But here I am, stuck ashore,
            loading and unloading gods-know-what for gods-know-whom. Well, it's
            a living.
    }
}

deflocation west_dock: dock_location {
    name = "West Dock"
    description = "A short wooden dock juts out into the bay."
    contents = [stevedore]
    exits = [rutted_path -> 'south to bayside_plaza_2]

    before enter_location(actor: .quest(isle_of_dawn.document_delivery, active), location, entry) {
        advance_quest(actor, isle_of_dawn.document_delivery, 'done)
    }
}

deflocation east_dock: dock_location {
    brief = "East Dock"
    description = "A rickety wooden dock extends out into the bay."
    exits = [rutted_path -> 'south to bayside_plaza_4]
}

// bayside plaza

def plaza_portal: lib.continuing_portal {
    brief = "the plaza"
}

def plaza_location: location {
    name = "Bayside Plaza"
    description = "A cobbled stone plaza runs along the shore of the bay."
    domain = 'outdoor
    surface = 'stone
}

def beggar: lib.npc {
    brief = "an old beggar"
    pose = "sits nearby."
    description = |
        The beggar looks like he's been dragged through a mile of mud. He smells
        worse than he looks.

    when talk(actor, self, subject) {
        show(actor) |
            The beggar looks up at you with milky white eyes and doesn't say a
            word. Despite his apparent blindness, he perfectly tracks your every
            move.
    }
}

deflocation bayside_plaza_1: plaza_location {
    contents = [beggar]
    exits = [plaza_portal -> 'east to bayside_plaza_2]
}

deflocation bayside_plaza_2: plaza_location {
    exits = [plaza_portal -> 'west to bayside_plaza_1,
             plaza_portal -> 'east to bayside_plaza_3,
             rutted_path -> 'north to west_dock]
}

deflocation bayside_plaza_3: plaza_location {
    exits = [plaza_portal -> 'west to bayside_plaza_2, plaza_portal -> 'east to bayside_plaza_4,
             dirt_road -> 'south to harbor_road_1]

    tutorial = |
        Welcome to Arwyck! In this lively town you will find numerous
        vendors and trainers.

        Vendors can sell you many items, including armor and weapons, which will
        prove invaluable in your adventures. They are represented on the map by
        an icon that looks like a stack of coins. Use the `buy` command near a
        vendor to see what's for sale.

        Trainers are representatives of `help:guilds`. By joining a guild you
        gain access to certain `help:skills`, including those required to use
        any weapons you may buy.

        Trainers are represented on the map by an upward-pointing arrow icon.
        Use the `guild` command near a trainer to learn more."
}

defquest dance_monkey {
    name = "Dance Monkey"
    summary = |
        Find the monkey and dance for it, dance for it, dance for it, oh oh oh.
    level = 1

    phase active {
        summary = |
            Find the monkey in Arwyck and dance for it, dance for it, dance for
            it, oh oh oh.
    }

    phase done {
        summary = |
            Return to the young laborer and recount your dancing exploits.
    }
}

def young_laborer: lib.npc {
    brief = "a young laborer"
    pose = "scrubs the cobbles nearby."
    description = |
        The laborer is a boy of perhaps fourteen summers. He is on his knees,
        scrubbing the cobbles with an old wire brush.
    offers_quests = [dance_monkey]

    when talk(actor: .quest(dance_monkey, available), self, topic) {
        show(actor) "The boy looks up from his work."
        tell(self, actor) |
            Oh my, I like your style! If you've got a moment, there's something
            that's been bothering me lately. I could really use your help.
        offer_quest(self, dance_monkey, actor)
    }

    after accept_quest(actor, quest: dance_monkey, self) {
        tell(self, actor) |
            There's this dancing monkey, you see. It wanders around the south
            end of town. It spends its days dancing for people, but it seems so
            sad. It makes me wanna cry.

            I think someone should dance for the monkey for once. My boss would
            break my arm if I left work, but...could you do it for me?

        show_tutorial(actor, 'emote) |
            You can perform simple gestures using the `emote` command. For
            example, you could type `emote dances for the monkey.` Type `help
            emote` for more information.
    }

    when talk(actor: .quest(dance_monkey, active), self, topic) {
        tell(self, actor) |
            Did you find the monkey? When you're done I won't make you do it all
            again, I promise.
    }

    when talk(actor: .quest(dance_monkey, done), self, topic) {
        tell(self, actor) |
            Look me in the eyes... you did it, didn't you? Ha ha I never thought
            you would, but thank you anyway!
        complete_quest(actor, dance_monkey)
    }

    when talk(actor, self, topic) {
        tell(self, actor, "Just look at these cobbles. Do you see the way they shine?")
    }
}

deflocation bayside_plaza_4: plaza_location {
    contents = [young_laborer]
    exits = [plaza_portal -> 'west to bayside_plaza_3, plaza_portal -> 'east to bayside_plaza_5,
             rutted_path -> 'north to east_dock]
}

defquest ticket_please {
    name = "Ticket, Please"
    summary = "Grab a ticket from the dispenser and present it to the attendant."
    level = 1

    phase active {
        summary = "Grab a ticket from the dispenser."
    }

    phase done {
        summary = "Present the ticket to the attendant."
    }
}

def yellow_ticket: item {
    brief = "a yellow ticket"
    description = |
        Tiny letters imprinted on the ticket read, "May be exchanged for 50
        silver coins. The issuer is not liable for any injury, death, or financial
        loss caused by goods or services purchased with said coins, or by the
        decision not to spend them."
    quest = ticket_please
}

def ticket_dispenser: fixture {
    brief = "a ticket dispenser"
    icon = 'flat_chest
    description = |
        A plaque atop the device reads:

        > This ticket dispenser is provided as a free service of the Explorer's Guild.

    // FIXME: receive_message = "%tB rattles briefly then dispenses %ab."

    when use(actor: .quest(ticket_please, active), self, target) {
        receive_items(actor, [yellow_ticket], self)
        show_tutorial(actor, 'give_items) |
            You can use the `give` command to give an item to a non-player
            character. To complete this quest, give the ticket to the attendant.
        advance_quest(actor, ticket_please, 'done)
    }

    when use(actor, self, target) {
        show(actor) "Try as you might, you cannot activate the ticket dispenser."
    }
}

def attendant: lib.npc {
    brief = "an attendant"
    description = |
        The attendant is extremely tall and thin. He wears a long, striped coat
        and a comically tall tophat.
    offers_quests = [ticket_please]

    when talk(actor: .quest(ticket_please, available), self, topic) {
        tell(self, actor) |
            You look like one of those reborn heroes who keep popping up. I bet
            you need some coin. I'd be happy to be of service!
        offer_quest(self, ticket_please, actor)
    }

    after accept_quest(actor, quest: ticket_please, self) {
        tell(self, actor) |
            See that ticket dispenser over there? If you `use` it, it will give
            you a ticket. If you then give that ticket me, I will exchange it
            for 50 silver coins! It seems too good to be true, but I assure you
            the offer is real. Why not give it a try?

        show_tutorial(actor, 'use) |
            The `use` command lets you use an item you are carrying or an item
            in your surroundings. It is a general-purpose way to employ an item
            for some effect.
    }

    when talk(actor: .quest(ticket_please, active), self, topic) {
        tell(self, actor) |
            Go ahead and `use` the dispenser. It won't bite.
    }

    allow give_item(actor, item: yellow_ticket, self) {
        return true
    }

    after give_item(actor: .quest(ticket_please, done), item: yellow_ticket, self) {
        tell(self, actor) |
            Another ticket redeemed! My bonus this month is going to be off the
            charts! Here's your silver. Don't spend it all in one place!
        // FIXME: receive_items(actor, [lib.silver_coin], self)
        complete_quest(actor, ticket_please, 'done)
    }
}

deflocation bayside_plaza_5: plaza_location {
    contents = [attendant, ticket_dispenser]
    exits = [plaza_portal -> 'west to bayside_plaza_4]
}

// harbor road

def harbor_road: location {
    name = "Harbor Road"
    description = |
        A rutted dirt road runs between the harbor and the village proper.
    surface = 'dirt
    domain = 'outdoor
}

deflocation harbor_road_1: harbor_road {
    exits = [dirt_road -> 'north to bayside_plaza_3, dirt_road -> 'south to harbor_road_2,
             lib.entry_doorway -> 'east to miners_guildhall]
}

deflocation harbor_road_2: harbor_road {
    exits = [dirt_road -> 'north to harbor_road_1, dirt_road -> 'south to square_n]
}

// miner's guild

def mining_trainer: lib.mining_trainer {
    brief = "Marigold"
    pose = "is nearby, poking through a stack of ore."
    description = |
        Marigold is a cheerful, rosy-cheeked dwarven woman who looks strong
        enough to crush rocks. Her leather garments are streaked with soot.

    when talk(actor, self, topic) {
        tell(self, actor) |
            Welcome to Arwyck! I am the local representative of the Underhill
            Consortium, a guild for those interested in mining. This workshop
            serves as a gathering place for our members.

            As a miner you can extract ore, raw gemstones, and other valuable
            resources from deposits scattered around the world. If this sounds
            useful, I'd love to welcome you to our guild! Type `guild info` for
            more information or `guild join` to sign up.

            If you decide mining's for you, Hermetch over there sells the tools
            you'll need to begin your mining career.
    }
}

def mining_vendor: lib.npc {  // FIXME: lib.vendor
    brief = "Hermetch the Bald"
    pose = "stands in front of the tool rack, whistling idly."
    description = |
        Hermetch lives up to his apellation; his head shines almost as brightly
        as the polished blades of the pickaxes on the rack behind him.
    sells = [lib.copper_pickaxe, lib.bronze_pickaxe]

    when talk(actor, self, topic) {
        tell(self, actor) |
            I sell the finest tools in the land! The absolute finest!
        await sleep(1)
        show(actor) "Marigold rolls her eyes."
        await sleep(1)
        tell(self, actor) |
            Pay her no mind... Type `buy` to see what's available.
    }
}

deflocation miners_guildhall: location {
    name = "Miners' Guildhall"
    description = |
        This cavernous warehouse contains numerous carts filled with different
        types of ore. A rack on the south wall holds a variety of pickaxes,
        shovels, and other tools useful for mining.
    domain = 'indoor
    surface = 'wood
    contents = [mining_trainer, mining_vendor]
    exits = [lib.exit_doorway -> 'west to harbor_road_1]
}

// village square

def square: location {
    name = "Village Square"
    description = |
        This cobbled plaza is the heart of the village. Various shops line its
        perimeter.
    domain = 'outdoor
    surface = 'stone
}

def square_portal: lib.continuing_portal {
  brief = "the square"
}

def shaggy_dog: lib.npc {
    brief = "a shaggy white dog"
    description = |
        The dog is very curious and closely watches anyone who passes by. Its
        fur is matted and dirty but it seems happy.

    lying_down = "lies nearby, curiously eyeing passers-by."
    standing = "stands nearby and looks around."

    when start_world() {
        while true {
            // FIXME: show_near(self, "The shaggy dog lays down in a comfortable spot.")
            self.pose = self.lying_down
            await sleep(20)

            // FIXME: show_near(self, "The shaggy dog stands up and stretches.")
            self.pose = self.standing
            await sleep(5)

            // FIXME:
            // var exits = [exit for exit in self.location.exits if exit.prototype == square_portal]
            // travel(self, select_random(exits))
            await sleep(5)
        }
    }

    when talk(actor, self, topic) {
        show(actor) "The dog's ears perk up and it tilts its head to the side."
    }
}

deflocation square_nw: square {
    contents = [shaggy_dog]
    exits = [square_portal -> 'east to square_n, square_portal -> 'south to square_w,
             lib.entry_doorway -> 'north to armory_training_hall,
             lib.entry_doorway -> 'west to sword_shop]
}

deflocation square_n: square {
    exits = [square_portal -> 'west to square_nw, square_portal -> 'east to square_ne,
             square_portal -> 'south to square_c, dirt_road -> 'north to harbor_road_2]
}

deflocation square_ne: square {
    exits = [square_portal -> 'west to square_n, square_portal -> 'south to square_e,
             lib.entry_doorway -> 'east to inn_common_room,
             lib.exit_doorway -> 'north to axe_shop]
}

deflocation square_w: square {
    exits = [square_portal -> 'north to square_nw, square_portal -> 'east to square_c,
             square_portal -> 'south to square_sw,
             lib.entry_doorway -> 'west to tower_library]
}

def square_sign: fixture {
    brief = "a directional sign"
    pose = "stands nearby."
    description = |
        Wooden arrows affixed atop the signpost read as follows:

        | North: Docks
        | West: Silverwood
        | South: Wall Street
        | East: Mistmarsh
}

def spiritstone: lib.spiritstone {
  pose = "stands on a small pedestal in the center of the square."
}

deflocation square_c: square {
    contents = [spiritstone, square_sign]
    exits = [square_portal -> 'west to square_w, square_portal -> 'east to square_e,
             square_portal -> 'north to square_n, square_portal -> 'south to square_s]

    tutorial = |
        You can `use` a spiritstone to bind your life essence to its location.
        If you later die, your spirit will return here and your body will be
        resurrected by the stone.
}

deflocation square_e: square {
    exits = [square_portal -> 'west to square_c, square_portal -> 'north to square_ne,
             square_portal -> 'south to square_se, dirt_road -> 'east to east_road_1]
}

deflocation square_sw: square {
    exits = [square_portal -> 'north to square_w, square_portal -> 'east to square_s,
             dirt_road -> 'west to forest_road_1, lib.entry_doorway -> 'south to lodge_foyer]
}

deflocation square_s: square {
    exits = [square_portal -> 'west to square_sw, square_portal -> 'east to square_se,
             square_portal -> 'north to square_c, dirt_road -> 'south to south_road_1]
}
def crone: lib.npc {
    brief = "an old crone"
    pose = "stands off to the side, watching people pass by."
    description = |
        The crone wears a faded gray cloak. Her wavy white hair spills from
        beneath her hood. Her eyes are bright, and she watches any passersby
        with great interest.

    after enter_location(actor, location, entry) {
        show(actor) "The crone stares at you for a moment, then looks away."
    }

    when talk(actor, self, topic) {
        tell(self, actor) |
            Greetings, stranger. Your new body may be young, but I can sense the
            age of your spirit. This is not your first time around the block, so
            to speak. In a past life you were a great hero, but perhaps you have
            forgotten your deeds. A pity.

            Know this: you are here for a reason. This world needs you; I feel
            it in my bones, I hear it on the wind...but I know not why. What
            threat could be so grave that, in order to overcome it, we must tear
            history's heroes away from their peaceful slumber in the Dreamlands?

            Of course that raises another question: who or what is doing the
            tearing?

            In the village of my birth there is an old curse: "May you live in
            interesting times." Perhaps I will be lucky and my days will end
            before things become too interesting. For you, though, I foresee no
            such luck.
    }
}

deflocation square_se: square {
    contents = [crone]
    exits = [square_portal -> 'west to square_s, square_portal -> 'north to square_e]
}

// sword shop

def sword_vendor: lib.npc {
    brief = "Bryndan O'Donnel"
    pose = "cleans a longsword with an oiled rag."
    description = |
        Bryndan is a lanky man with freckled skin and gray eyes. His auburn hair
        hangs down to his shoulders.
    sells = []  // FIXME: [copper_sword, bronze_sword, copper_greatsword, bronze_greatsword]

    when talk(actor: .quest(talking_shop, active), self, topic) {
        tell(self, actor) |
            Ah, yes, I heard about Mirabel. Those bastards stole a few blades
            from me, perhaps a week past.

            If you've not heard of the Gray Hand, well, that's a good thing. But
            every merchant in town knows 'em. They want a piece of the pie, and
            say they'll protect us. Little good they did this time. My contact
            there swears they had nothing to do with any of these recent thefts.
            But what good is the word of a thief?

            That being said, I've never had particular problems with the Hand
            before. So maybe this is something different.

        // FIXME: advance_quest(actor, talking_shop, 'sword_vendor)
    }

    when talk(actor, self, topic) {
        tell(self, actor) |
            Welcome to my shop! I have a variety of swords for sale.
            Type `buy` to see what I have available.
    }
}

deflocation sword_shop: location {
    name = "Bryndan's House of Blades"
    description = |
        A variety of bladed weapons are displayed in racks that fill this small
        shop.
    domain = 'indoor
    surface = 'wood
    contents = [sword_vendor]
    exits = [lib.exit_doorway -> 'east to square_nw]
}

// axe shop

def axe_vendor: lib.npc {
    brief = "Durg Bighands"
    pose = "sits atop a chair that is clearly too small for him."
    description = |
        Durg is an ogre. Although he is very small for his kind, he is still far
        too large for the typical furniture found in Arwyck.
    sells = []  // FIXME: [copper_axe, bronze_axe, copper_battleaxe, bronze_battleaxe]

    when talk(actor, self, topic) {
        show(actor) "Durg stretches his shoulders."
        tell(self, actor) |
            Do you happen to need an axe? Maybe two? Type `buy` to see my wares.
    }
}

deflocation axe_shop: location {
    name = "Durg's Slicery"
    description = "The walls are lined with inexpensive but servicable axes."
    domain = 'indoor
    surface = 'wood
    contents = [axe_vendor]
    exits = [lib.exit_doorway -> 'south to square_ne]
}

// inn

def inn_room: location {
    domain =  'indoor
    surface = 'wood
    subregion = "Golden Gryphon"
}

def rye_loaf: lib.food {
    brief = "a loa[f|ves] of rye bread"
    description = "The loaf of rye bread looks rather delicious."
    icon = 'bread
    price = 2 of lib.silver_coin
}

def fish_soup: lib.food {
    brief = "a bowl[s] of fish soup"
    description = "Warning: Fish content not guaranteed."
    price = 3 of lib.silver_coin
}

def sienna: lib.npc {
    brief = "Sienna"
    pose = "is working behind the bar."
    description = |
        Sienna is a tall woman with short yellow hair and light brown eyes. She
        keeps a close eye on her patrons.
    sells = [rye_loaf, fish_soup]

    when talk(actor, self, subject) {
        tell(self, actor) |
            Welcome to the Golden Gryphon! I sell food and drink. I'd say it's
            the best in town but my mam told me never to lie, so I won't. If
            you're learning to cook, I can sell you a few recipes as well. Type
            `buy` to see what I have for sale.
    }
}

deflocation inn_common_room: inn_room {
    name = "Common Room"
    description = |
        The common room of the Golden Gryphon is a cheerful place. A crackling
        fire burns in the stone hearth. Numerous tables and chairs give the
        space a crowded feel, even when few customers are present. A long oak
        bar lines one wall.
    contents = [sienna]
    exits = [lib.exit_doorway -> 'west to square_ne,
             lib.doorway -> 'north to inn_kitchen,
             lib.stairway -> 'up to inn_upstairs_hall]
}

def cooking_trainer: lib.npc {
    brief = "Dully the Cook"
    pose = "is stirring a pot of...something."
    description = |
        Dully is a portly dwarven male with a scraggly beard. He wears a
        grease-stained apron and a strange, poofy hat. He wields a huge wooden spoon
        as if it were a weapon.
    teaches = []  // FIXME:

    after enter_location(actor, location, entry) {
        tell(self, actor) "Aye, it's a good day for a stew, ain't it?"
    }

    when talk(actor, self, topic) {
        tell(self, actor) |
            Aye, if ye be lookin' ta learn ta cook, I be yer dwarf. Type `learn`
            ta see wha I can teach ya, or `help skills` ta learn more about
            skills an' such.
    }
}

deflocation inn_kitchen: inn_room {
    name = "Kitchen"
    description = |
        This large and somewhat disorganized kitchen smells faintly of ale and
        grease.
    contents = [cooking_trainer]
    exits = [lib.doorway -> 'south to inn_common_room]
}

deflocation inn_upstairs_hall: inn_room {
    name = "Upstairs Hall"
    description = |
        This dark, windowless hall leads to the Golden Gryphon's guest rooms.
    exits = [lib.stairway -> 'down to inn_common_room,
             lib.doorway -> 'west to small_guest_room,
             lib.doorway -> 'east to large_guest_room]
}

deflocation small_guest_room: inn_room {
    name = "Small Guest Room"
    description = |
        This cramped room holds a small bed and an iron-bound chest. The window
        overlooks the village square.
    exits = [lib.doorway -> 'east to inn_upstairs_hall]
}

deflocation large_guest_room: inn_room {
    name = "Large Guest Room"
    description = |
        This room is tastefully furnished. The wide feather bed is lumpy but
        comfortable. An oak wardrobe features carvings of trees and forest
        creatures. The window provides a view of nearby rooftops and the rolling
        hills east of the village.
    exits = [lib.doorway -> 'west to inn_upstairs_hall]
}

// armory

def warrior_trainer: lib.npc {  // FIXME: lib.warrior_trainer
    brief = "Andalya"
    pose = "is in the center of the room, idly swinging a slender longsword."
    description = |
        Andalya is a lean, graying woman who wears loose clothing befitting
        one who teaches the martial arts.

    when talk(actor, self, topic) {
        tell(self, actor) |
            Welcome, stranger. I am Andalya. It is my privilege to be the local
            representative of the Company of the Blade. We are a band dedicated
            to the practice of the martial arts. It is my job to train those who
            are interested in learning to defend themselves with good steel.

            Type `guild info` to learn more about my guild. If you want to join,
            type `guild join`.
    }
}

deflocation armory_training_hall: location {
    name = "Training Hall"
    description = |
        This long hall has stone walls and an arched ceiling. The soft wooden
        floor is clean but marred from the many training matches that have been
        fought here.
    domain = 'indoor
    surface = 'wood
    contents = [warrior_trainer]
    exits = [lib.exit_doorway -> 'south to square_nw]
}

// explorers' lodge

def lodge_room: location {
    domain = 'indoor
    surface = 'wood
    subregion = "Explorer's Lodge"
}

def quartermaster: lib.npc {
    brief = "the quartermaster"
    pose = "stands nearby."
    description = |
        The quartermaster is a slender man with graying hair and elegant
        mustaches. His clothing, although impeccably clean, seems a little too big
        for him.
    sells = []  // FIXME:

    when talk(actor, self, topic) {
        tell(self, actor) "Good day to you, traveler."
    }
}

deflocation lodge_foyer: lodge_room {
    name = "Foyer"
    description = |
        This airy room has wood-paneled walls and a thick carpet on the floor.
    contents = [quartermaster]
    exits = [lib.exit_doorway -> 'north to square_sw,
             lib.doorway -> 'south to lodge_trophy_room,
             lib.doorway -> 'west to lodge_study]
}

def stuffed_gorilla: fixture {
    brief = "a stuffed gorilla"
    pose = "stands at the end of the room."
    icon = 'gorilla
    description = |
        This intimidating creature stands over eight feet tall. Even in death
        its expression is fierce. A plaque mounted on the wall reads:

        > Although it slew several dogs and gravely wounded a scout, our party
        defeated this beast as we traversed the jungles of Phaa, CY 549.
}

deflocation lodge_trophy_room: lodge_room {
    name = "Trophy Room"
    description = |
        The walls of this long room are lined with hunting prizes of all kinds:
        antlers, horns, mounted heads, and more.
    contents = [stuffed_gorilla]
    exits = [lib.doorway -> 'north to lodge_foyer, lib.doorway -> 'west to lodge_workshop]
}

def lord_olmquist: lib.npc {
    brief = "Lord Olmquist"
    pose = "sits in a chair, smoking a pipe."
    description = |
        Olmquist is a rather stout, red-cheeked fellow with a bushy white beard
        and bald pate. Horn-rimmed spectacles perch upon his substantial nose.
        He wears a velvet smoking jacket, an open-necked white shirt, and dark
        silk trousers.

    when talk(actor, self, topic) {
        tell(self, actor) "Why yes, be a dear and fetch me a bourbon, won't you?"
    }
}

deflocation lodge_study: lodge_room {
    name = "Study"
    description = |
        Two walls of this room are lined with shelves full of books. A number of
        comfortable armchairs and small tables fill the remainder of the space.
    contents = [lord_olmquist]
    exits = [lib.doorway -> 'east to lodge_foyer, lib.doorway -> 'south to lodge_workshop]
}

def explorer_trainer: lib.npc {
    brief = "Naman Artani"
    pose = "is hunched over a strange device on the table."
    description = |
        Naman is a wiry young man who wears a scarred leather apron over his
        practical attire. His curly auburn hair floats in a wild cloud around
        his head.
    teaches = []  // FIXME: swimming, climbing, ...?

    when talk(actor, self, topic) {
        tell(self, actor) |
            Welcome to the Explorer's Lodge. Members of our guild travel across
            Atalea in search of rarities: strange creatures, lost treasures, and
            ancient knowledge. As you might imagine, survival skills come in
            quite handy in this vocation!

            I am happy to teach you some of those skills. Type `learn` to see
            what I can teach you.
    }
}

deflocation lodge_workshop: lodge_room {
    name =  "Workshop"
    description = |
        A long table fills the center of this room; various implements are
        strewn across its surface. Shelves along the walls hold all manner of
        tools and contraptions.
    contents = [explorer_trainer]
    exits = [lib.doorway -> 'north to lodge_study, lib.doorway -> 'east to lodge_trophy_room,
             lib.exit_doorway -> 'south to wall_street_1]
}
