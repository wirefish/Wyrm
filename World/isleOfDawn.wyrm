// This is the starter zone for new characters. It is meant as a basic
// introduction to the game and tutorial for vital mechanics.

def region {
  name = "Isle of Dawn"
  description = """
    The souls of ancient heroes are reborn atop a sacred hill in the middle of
    this small island. The magical energies of the place allow a soul to regain
    its physical form so it may join the battle against the great evil that
    threatens Atalea.
    """
}

def entity isleLocation: location {
  domain = 'outdoor
  surface = 'grass
}

def entity gravelPath: portal {
  brief = "a gravel path"
  description = """
    The path's surface of finely crushed white stone contrasts with the lush
    greenery which surrounds you.
    """
}

//# hilltop

def entity standingStones: fixture {
  brief = "ring of standing stones"
  description = """
    You count nine stones, each about 12 feet tall and four feet wide. The faint
    remains of ornate tracery are barely visible upon their weathered surfaces.
    """
  implied = true
}

def location hilltop: isleLocation {
  name = "Hilltop"
  description = """
    You are standing atop a low hill in the center of a small island. A ring of
    ancient standing stones encircles the crown of the hill. The long grass that
    covers the hillside sways back and forth in the gentle breeze.
    """
  tutorial = """
    Welcome to Atalea! As a new player, you will sometimes see green text like
    this. These messages provide tips to help you get started. For details, type
    `help tutorial`.

    A few basics: to move around the world, type the direction you want to go.
    For example, type `south` or `s` to move south. To look at your
    surroundings, type `look`. To look at something specific, add its name or
    description. For example, try `look standing stones` or `look self`.

    Head `south` to begin your adventure!
    """
  contents = [standingStones]
  exits = [gravelPath -> 'south to pavilion]
}

//# pavilion

def entity spiritWarden: lib.npc {
  brief = "the spirit warden"
  pose = "stands nearby, smiling amiably."
  description = """
    The spirit warden is an elderly human man, standing well over six feet tall.
    His long white hair and wispy beard frame a wrinkled, grinning face. He
    wears dark blue robes with gold embroidered trim.
    """

  after enterLocation(actor: .quest(chooseARace, available), location, entry) {
    await sleep(1)
    if actor.location == location {
      show(actor, "The spirit warden beckons in your direction.")
    }
  }

  when talk(actor, target: self, topic) {
    tell(self, actor) """
      Welcome to Atalea, hero! Or perhaps I should say \"welcome back...\"

      I don't know how to explain this, but you died long ago. My condolences.
      For reasons unknown, however, you have been recalled from the Dreamlands
      and once again walk in the physical world.

      My colleagues stand ready to help reorient you after your long absence. As
      you explore this isle, talk to anyone you meet; we are all here to help.

      To the south you will meet an odd creature who will get you started. Head
      that way when you are ready.
      """
  }
}

def location pavilion: isleLocation {
  name = "Pavilion"
  description = """
    An open-air pavilion stands a few feet from the path. Its silk canopy is
    painted in bright colors.
    """

  tutorial = """
    You will often encounter creatures with whom you can interact. They may
    provide useful information or offer rewards if you perform actions on their
    behalf. For example, type `talk warden` to talk to the spirit warden. He may
    have something interesting to say.
    """

  contents = [spiritWarden]
  exits = [gravelPath -> 'north to hilltop, gravelPath -> 'south to wildflowerField]
}

//# wildflowerField

def quest chooseARace {
  name = "Let's Get Physical"
  summary = """
    Choose your physical form by meditating at one of the racial shrines on the
    Isle of Dawn, then return to the officious kobold.
    """

  phase active {
    summary = "Meditate at any of the racial shrines on the Isle of Dawn."
  }

  phase done {
    summary = "Return to the officious kobold."
  }
}

def entity officiousKobold: lib.npc {
  brief =  "an officious kobold"
  pose = "sits at a low table in the shade of a large umbrella."
  description = """
    The kobold is a tiny humanoid with reptilian features, sparse wiry hair, and
    knobbly gray skin. It is, however, impeccably groomed.
    """
  offersQuests = [chooseARace]

  when talk(actor: .quest(chooseARace, available), self, topic) {
    tell(self, actor) """
      Hello, friend! As you may have noticed, your current body is just a
      ghostly manifestation of your spirit. To fix that you'll need to select a
      race and take on a physical form. It just so happens I can help you do
      exactly that!
      """

    offerQuest(self, chooseARace, actor)

    showTutorial(actor, 'offerQuest) """
      The kobold is offering you a quest! Quests are tasks set for you by the
      denizens of the world. Completing them can provide you with many kinds of
      rewards. Type `help quests` for more information.
      """
  }

  after acceptQuest(actor, quest: chooseARace, self) {
    tell(self, actor) """
      Excellent! To the west you will find several shrines, each dedicated to a
      different race. Talk to the caretaker at each shrine to learn more about
      his or her people.

      Then, when you find the race that's right for you, return to the selected
      shrine and `meditate`. The caretaker will, ahem, take care of the rest.

      Return to me once you have completed this task.
      """
    showTutorial(actor, 'acceptQuest) """
      You can use the `quest` command to see the quests you've accepted and
      track your progress toward their completion.
      """
  }

  when talk(actor: .quest(chooseARace, active), self, topic) {
    tell(self, actor) """
      Have you selected a race yet? The caretakers to the west will be more than
      happy to describe their races and help you make the right decision.
      """
  }

  when talk(actor: .quest(chooseARace, done), self, topic) {
    tell(self, actor) """
      A fine choice! I had no doubt you would choose to become {actor.race:i}. I
      am something of an expert in these matters, after all.

      I can't help but notice that your new body, while quite lovely, is also
      quite naked. Aren't you cold? To the south you will find my friend Dhalia,
      the seamstress; talk to her and she will make sure you go forth in style.
      """
    completeQuest(actor, chooseARace)
  }

  when talk(actor, self, topic) {
    tell(self, actor) """
      Good to see you again! You may have heard that some of my kind have
      occupied an old copper mine, deep in the forest west of Arwyck. I assure
      you I have nothing whatsoever to do with those filthy creatures, despite
      our shared ancestry.
      """
  }
}

def location wildflowerField: isleLocation {
  name = "Field of Wildflowers"
  description = """
    Flowers of every color and description bloom in the expansive fields along
    the sides of the path. The air is heavy with their fragrance.
    """
  surface = 'flowers

  tutorial = """
    The ! symbol on the map means that a creature wants to talk to you about an
    available quest. You can `talk` to the creature to learn more. When you see
    the &#x22ef; symbol, you can `talk` to the creature about a quest you have
    accepted but not yet completed. If you see the &#x2713; symbol, then you
    have completed a quest and can `talk` to the creature to receive your
    rewards!

    The kobold has a quest for you. Try typing `talk kobold`.
    """
  contents = [officiousKobold]
  exits = [gravelPath -> 'north to pavilion, gravelPath -> 'south to clothingStall,
           gravelPath -> 'west to humanShrine]
}

//# humanShrine

def entity humanCaretaker: lib.npc {
  brief = "the human caretaker"
  pose = "stands nearby with a welcoming expression."
  description = """
    The caretaker is a tall, athletic woman wearing a practical leather outfit
    and a broad-brimmed hat. Various gardening tools hang from her wide leather
    belt.
    """

  when talk(actor: .quest(chooseARace, active), self, topic) {
    tell(self, actor) """
      Hello, traveler. I imagine you are curious about humans. Here is what I
      can tell you.

      First and foremost, humans are known for their optimism and their
      adaptability. We feel like we can do anything, and do it well. Perhaps
      you've heard the expression, \"Jack of all trades, master of none?\" Some
      might consider it a negative, but we humans take pride in our ability to
      do a little bit of everything.

      Second, humans are especially noted for their skill as gatherers and
      farmers. We are adept at using our ingenuity to extract the bounty of the
      earth.

      If you want to join humankind, `meditate` here. I will then use the power
      of the shrine to complete your transformation.
      """
  }
}

def location humanShrine: isleLocation {
  name = "Shrine of Humanity"
  description = """
    This part of the isle is a large garden. Plants bearing flowers, fruits, and
    vegetables are arranged in orderly rows. The soil is dark and fertile.
    """
  contents = [humanCaretaker]
  exits = [gravelPath -> 'east to wildflowerField, gravelPath -> 'north to elvenShrine,
           gravelPath -> 'west to ogreShrine]

  when meditate(actor: .quest(chooseARace, active)) {
    show(actor) """
      A calming warmth suffuses your being. The caretaker smiles broadly as she
      reaches out to you with her open hand, holding it inches from your ghostly
      form. She smiles broadly as the warmth spreads to her hand.

      After a moment she closes her palm. You see a faint glow between her
      fingers which quickly grows brighter. When she opens her hand she holds a
      tiny seedling, its delicate leaves unfolding before your eyes.
      """
    changeRace(actor, lib.human)
    advanceQuest(actor, chooseARace)
  }

  when meditate(actor) {
    show(actor) "The caretaker nods in approval."
  }
}

//# elvenShrine

def entity woodenSculpture: fixture {
  brief = "a wooden sculpture"
  pose = "stands in the middle of the ring of trees."
  description = """
    The sculpture is carved from polished yellow wood. Its form is fluid and
    abstract but somehow evokes images of towering forest oaks and hidden
    woodland dells. Golden-brown moss grows in chaotic yet precise patterns
    along its sides. Atop the sculpture rests a shallow bowl made of green
    glass. The bowl contains clear, cold water.
    """
}

def entity elvenCaretaker: lib.npc {
  brief = "the elven caretaker"
  pose = "kneels beside one of the trees, her eyes closed."
  description = """
    The elven caretaker is a graceful young woman with striking emerald eyes and
    long, silver hair arranged in complex braids. She wears a pale green dress
    with embroidered trim.
    """

  when talk(actor: .quest(chooseARace, active), self, topic) {
    tell(self, actor) """
      Greetings, stranger. Be welcome in this place. No doubt you have come here
      to learn something about my people. I will tell you what I can.

      Mine are a peaceful, thoughtful people who love and respect nature. This
      was not always so; millenia ago we nearly destroyed ourselves with our
      prideful, warlike ways. It took a terrible crisis for my ancestors to
      change. I pray that we never slide back into those habits that nearly left
      us extinct.

      Elves are quick-footed and quick-witted, although we are not as strong as
      many of the other races of Atalea. We excel as hunters, magicians, bards,
      and---it pains me to say---as thieves. We consider ourselves custodians of
      the forest and take that charge very seriously. We do not stand idly by if
      our beloved home is threatened.

      If you would join my folk, simply `meditate` here to make your purpose
      known; the shrine's power will do the rest.
      """
  }
}

def location elvenShrine: isleLocation {
  name = "Shrine of the Forest"
  description = """
    A low wooden fence surrounds a perfect ring of thirteen graceful birch
    trees. The area radiates an aura of tranquility.
    """
  surface = 'forest
  contents = [woodenSculpture, elvenCaretaker]
  exits = [gravelPath -> 'south to humanShrine, gravelPath -> 'north to sidheShrine,
           gravelPath -> 'west to goblinShrine]

  when meditate(actor: .quest(chooseARace, active)) {
    show(actor) """
      The caretaker approaches the nearby sculpture and raises her hands to the
      sky. Motes of light rise from the bowl atop the sculpture; they quickly
      become so bright you are forced to look away. A swirling wind rises and
      the trees begin to sway, their leaves glimmering in the light. Soon the
      motes move toward you, surrounding you with their light and warmth.

      After a few moments the wind dies down and the motes dissolve into tiny
      sparkling flecks which quickly disperse in the dying breeze. The clearing
      is calm once again.
      """
    changeRace(actor, lib.elf)
    advanceQuest(actor, chooseARace)
  }

  when meditate(actor) {
    show(actor) "The caretaker bows respectfully."
  }
}

//# sidheShrine

def entity sidheCaretaker: lib.npc {
  brief = "the sidhe caretaker"
  pose = "stands nearby, lost in thought."
  description = """
    The sidhe caretaker is a tall, gaunt man with a stern look. His long white
    hair is pulled back into a ponytail that nearly reaches the ground. He wears
    dark robes of a rather elaborate and archaic style.
    """

  when talk(actor: .quest(chooseARace, active), self, topic) {
    tell(self, actor) """
      Well, well. Another hero, reborn. I suppose I should tell you something of
      my race, although I find it unlikely you were fortunate enough to be a
      member of the Fair Folk in your past life.

      For uncounted millenia, my people lived in an alternate plane of existence
      called the Shadowlands. A few short centuries ago, war with demons drove
      us out of our homeland. We ended up here.

      At our core, we sidhe are creatures of magic. It is our very essence. Few
      sidhe have become famous warriors or minstrels, although of course it is
      possible. But all of our people have some small skill in magic, and many
      have become wizards of reknown.

      I cannot say it seems likely, but if you believe you are truly one of us
      then I encourage you to `meditate` before the shrine. If you are found
      worthy, I will welcome you into the fold.
      """
  }
}

def entity alienTree: fixture {
  brief = "a tree"
  description = """
    The tree is clearly very old. You get a strange sense that it does not
    belong in this world.
    """
  implied = true
}

def entity runedBoulder: fixture {
  brief = "a boulder"
  description = """
    Upon closer inspection, you notice that the entire surface of the boulder is
    covered with tiny rune-like markings.
    """
  implied = true
}

def location sidheShrine: isleLocation {
  name = "Shrine of Shadows"
  description = """
    A lone tree grows atop an enormous granite boulder. Its gnarled, gray roots
    wrap around the stone before sinking into the fertile earth below. The
    tree's twisted branches splay outward and its dense leaves form a solid
    canopy that condemns this part of the isle to perpetual shadow.
    """
  surface = 'forest
  contents = [sidheCaretaker, alienTree, runedBoulder]
  exits = [gravelPath -> 'south to elvenShrine, gravelPath -> 'west to dwarvenShrine]

  when meditate(actor: .quest(chooseARace, active)) {
    show(actor) """
      As you begin your meditation, the shadows in the area deepen. The leaves
      above begin to rustle, as if the tree is growing restless.

      You vision begins to blur. Shifting figures appear, ghosts of creatures
      from another world. They call to you in an alien language you have never
      heard.

      After a moment, you begin to understand their words. You answer their
      calls, but the meaning of your words is lost as soon as they are uttered.
      Apparently satisfied, the figures disappear; the shadows retreat.
      """
    changeRace(actor, lib.sidhe)
    advanceQuest(actor, chooseARace)
  }

  when meditate(actor) {
    show(actor) "The caretaker arches an eyebrow."
  }
}

//# dwarvenShrine

def entity dwarvenCaretaker: lib.npc {
  brief = "the dwarven caretaker"
  pose = "stands proudly amid the statues."
  description = """
    The dwarven caretaker stands about four feet tall, with shoulders nearly as
    wide. He wears full chain mail, even in the heat of the day. His armor
    appears to be of fine workmanship. A heavy maul hangs from his belt. His
    long, red beard falls across a belly that has seen a few pints of ale in its
    day.
    """

  when talk(actor: .quest(chooseARace, active), self, topic) {
    tell(self, actor) """
      Well met! If it's a dwarf ye wanna be, then ye be at tha right place. I
      kinna imagine wantin' ta be anythin' else!

      Me people may be wee, but we have tha strength of tha mountains within us!
      Aye, it's true, we have a great love for gold and gems. But we have nae
      great love for tha dark beasties that lurk below tha earth. We dwarves are
      great crafters and even greater at fightin', when tha times require it.

      If ye think that all sounds good, then get ta meditatin'!
      """
  }
}

def location dwarvenShrine: isleLocation {
  name = "Shrine of the Mountain"
  description = """
    Rows of stone statues stand in the tall grass, each depicting a stout
    warrior with a grim expression and glowing amber eyes. The statues are
    arrayed in formation like soldiers marching to battle.
    """
  contents = [dwarvenCaretaker]
  exits = [gravelPath -> 'east to sidheShrine, gravelPath -> 'south to goblinShrine]

  when meditate(actor: .quest(chooseARace, active)) {
    show(actor) """
      The caretaker grasps his maul with both hands and holds it out before him.
      After a moment the hammer begins to vibrate and erupts with amber light,
      echoing the statues' eyes. The vibrations grow stronger and emanate
      outward from the caretaker's body. Soon the entire area is shaking and the
      statues begin to rock back and forth.

      A powerful voice intones, \"You have chosen. So be it. Strong as stone,
      bright as steel. May you bring honor to clan and king.\"

      Without warning the shaking stops and the light dissipates.
      """
    changeRace(actor, lib.dwarf)
    advanceQuest(actor, chooseARace)
  }

  when meditate(actor) {
    show(actor) "The caretaker joins you in silent reflection."
  }
}

//# goblinShrine

def entity chessboard: fixture {
  brief = "a stone chessboard"
  pose = "rests atop a low table."
  description = """
    The chessboard is remarkable for its pieces: each is a finely detailed and
    garishly-painted rendition of a creature who looks much like the caretaker.
    The pieces are so realistic they seem almost alive.
    """
  implied = true
}

def entity goblinCaretaker: lib.npc {
  brief = "the goblin caretaker"
  pose = "stands beside a chessboard, apparently pondering his next move."
  description = """
    The caretaker is a short, big-eared creature with greenish-blue skin. In
    contrast with his somewhat comical proportions and garish attire, his large
    dark eyes evince a keen intellect.
    """

  when talk(actor: .quest(chooseARace, active), self, topic) {
    tell(self, actor) """
      Hello, friend! I can't tell you how happy I am to see your interest in
      goblinkind. We are a misunderstood folk! Let me set the record straight.

      Goblins are small in stature but we have big dreams. Mostly dreams of
      wealth, it's true, but there's nothing wrong with a little spending cash,
      eh?

      Some larger folks will tell you we are thieves, beggars, and worse. That
      is so mostly untrue! The majority of us would rather get rich through
      shrewd business practices and hard bargaining than by using less savory
      methods.

      When those ignorant louts take offense at our methods, it certainly helps
      that we're quick and stealthy by nature. You won't see many goblins waving
      huge swords around, but as they say, \"Size isn't everything!\"

      If you feel like you're one of us at heart, why not become one of us in
      body, too? Just `meditate` here and the deed will be done.
      """
  }
}

def location goblinShrine: isleLocation {
  name = "Shrine of Fortune"
  description = """
    The ground here has been cleared, leveled, and surfaced with multiColored
    bricks.
    """
  surface = 'stone
  contents = [chessboard, goblinCaretaker]
  exits = [gravelPath -> 'north to dwarvenShrine, gravelPath -> 'south to ogreShrine,
           gravelPath -> 'east to elvenShrine]

  when meditate(actor: .quest(chooseARace, active)) {
    show(actor) """
      As soon as you close your eyes, you have a vision of the world around you
      getting larger...or are you getting smaller? For a moment you are stricken
      with vertigo as the world shifts and spins.

      Once the dizziness passes, you open your eyes to find that your stature
      and greenish skin now match those of the caretaker.
      """
    changeRace(actor, lib.goblin)
    tell(self, actor) "Huzzah! Welcome to the family!"
    advanceQuest(actor, chooseARace)
  }

  when meditate(actor) {
    show(actor) "The caretaker leaves you to your meditation."
  }
}

//# ogreShrine

def entity ogreCaretaker: lib.npc {
  brief = "the ogre caretaker"
  pose = "is here, casually pulverizing rocks with his hammer."
  description = """
    The caretaker is a hulking figure, standing over eight feel tall. He wears
    an iron helm, iron gauntlets, and a breechclout. He carries an enormous iron
    sledgehammer.
    """

  when talk(actor: .quest(chooseARace, active), self, topic) {
    tell(self, actor) """
      Ugh. I be ogre of few words, but I know what you want. I tell you of my
      kin. We big. We strong. Done!

      You came to `meditate`? Ha. If you wanna be ogre, do it. Done!
      """
  }
}

def location ogreShrine: isleLocation {
  name = "Shrine of Strength"
  description = """
    This area is choked with a haphazard collection of rough stone blocks, many
    overgrown with vines and twisting grasses. The blocks' surfaces have been
    crudely painted with scenes of carnage featuring enormous warriors laying
    waste to their tiny assailants.
    """
  surface = 'stone
  contents = [ogreCaretaker]
  exits = [gravelPath -> 'north to goblinShrine, gravelPath -> 'east to humanShrine]

  when meditate(actor: .quest(chooseARace, active)) {
    show(actor) """
      The caretaker selects a boulder and tosses it on the ground before you. He
      then steps over, raises his hammer, and crushes the rock as he lets out an
      enormous belly laugh.

      Rocks fly around. Muscles grow. Brain shrink. Done!
      """
    changeRace(actor, lib.ogre)
    advanceQuest(actor, chooseARace)
  }

  when meditate(actor) {
    show(actor) "The caretaker chuckles and crushes another boulder."
  }
}

//# clothingStall

def entity simpleShirt: lib.shirt {
  brief = "a simple cotton shirt"
  description = """
    The shirt is well-made and comfortable if not entirely fashionable.
    """
}

def entity simplePants: lib.pants {
  brief = "a pair of cotton pants"
  description = """
    The pants are made of thick brown cloth. They have been patched only a
    handful of times.
    """
}

def entity canvasShoes: lib.shoes {
  brief = "a pair of canvas shoes"
  description = """
    These low shoes have a sturdy sole. They seem suitable for walking long
    distances.
    """
}

def entity smallBackpack: lib.backpack {
  brief = "a small canvas backpack"
  description = """
    The backpack has wide leather straps and a drawstring closure.
    """
}

def quest getSomeClothes {
  name = "Cover Up"
  summary = """
    Pick a white tulip for Dhalia, then exchange it for a set of clothes.
    """
  requiredQuests = [chooseARace]

  phase active {
    summary = "Pick a white tulip from the fields east of the clothing stall."
  }

  phase done {
    summary = "Return the tulip to Dhalia."
  }
}

def entity seamstress: lib.npc {
  brief = "Dhalia"
  pose = "stands in the stall, organizing her wares."
  description = """
    Dhalia is a human woman of indeterminate age. She wears silver-rimmed
    spectacles and an impeccably-tailored dress decorated with a floral pattern.
    """
  offersQuests = [getSomeClothes]

  when talk(actor: .quest(getSomeClothes, available), self, topic) {
    tell(self, actor) """
      Greetings! Did our mutual kobold friend send you my way? It certainly
      seems you have need of my wares. I will happily provide you with an outfit
      that should serve your needs, but I must ask a favor in return.
      """
    offerQuest(self, getSomeClothes, actor)
  }

  after acceptQuest(actor, quest: getSomeClothes, self) {
    tell(self, actor) """
      Wonderful! You see, I am very fond of white tulips, but my work here
      prevents me from taking the time to gather them. Would you head to the
      east and get one for me?
      """
  }

  when talk(actor: .quest(getSomeClothes, active), self, topic) {
    tell(self, actor) """
      Have you found a white tulip for me? They're just to the east.
      """
  }

  when talk(actor: .quest(getSomeClothes, done), self, topic) {
    giveItem(actor, whiteTulip, self)

    tell(self, actor) """
      Why thank you, this tulip is lovely! Your timing is perfect; I have just
      finished selecting an outfit for you.
      """

    receiveItems(actor, [simpleShirt, simplePants, canvasShoes, smallBackpack], self)
    completeQuest(actor, getSomeClothes)

    showTutorial(actor, 'items) """
      The seamstress has given you several items; type `inventory` or `inv` to
      list them.

      To wear an item, use the `equip` command. For example, type `equip shirt`.
      Type just `equip` to list the items you currently have equipped.

      In addition to clothing, the seamstress also gave you a backpack.
      Equipping it will increase the number of items you can carry.

      For more information type `help equip` or `help inventory`.
      """
  }
}

def location clothingStall: isleLocation {
  name = "Clothing Stall"
  description = """
    A wooden market stall has been erected beside the path. Its counter is piled
    with basic clothing items in myriad styles and sizes.
    """
  contents = [seamstress]
  exits = [gravelPath -> 'north to wildflowerField, gravelPath -> 'south to fountainPlaza,
           gravelPath -> 'east to tulipFieldSw]
}

//# tulipField

def entity whiteTulip: item {
  brief = "a white tulip"
  pose = "draws your attention."
  description = """
    The tulip is quite lovely; you can see why Dhalia prizes them.
    """
  size = 'small  // FIXME:
  entryPose = "catches your eye."
  quest = getSomeClothes
  stackLimit = 1

  when take(actor, self, source) {
    spawn(whiteTulip, source, 15)
    advanceQuest(actor, getSomeClothes)
  }
}

def entity tulipFieldPortal: lib.continuingPortal {
  brief = "the tulip field"
}

def entity tulipField: isleLocation {
  name = "Field of Tulips"
  description = """
    Tulips in myriad colors have been planted here.
    """
  surface = 'flowers
  contents = [whiteTulip!]
}

def location tulipFieldSw: tulipField {
  tutorial = """
    Some items can be picked up using the `take` command. For example, type
    `take tulip` to take a white tulip when you see one. Picking up an item
    places it into your inventory. Use the `inventory` command to list the items
    you are carrying.
    """
  exits = [gravelPath -> 'west to clothingStall, tulipFieldPortal -> 'east to tulipFieldSe,
           tulipFieldPortal -> 'north to tulipFieldNw]
}

def location tulipFieldSe: tulipField {
  exits = [tulipFieldPortal -> 'west to tulipFieldSw, tulipFieldPortal -> 'north to tulipFieldNe]
}

def location tulipFieldNw: tulipField {
  exits = [tulipFieldPortal -> 'east to tulipFieldNe, tulipFieldPortal -> 'south to tulipFieldSw]
}

def location tulipFieldNe: tulipField {
  exits = [tulipFieldPortal -> 'west to tulipFieldNw, tulipFieldPortal -> 'south to tulipFieldSe]
}

//# fountainPlaza

def entity fountain: fixture {
  brief = "a stone fountain"
  pose = "stands in the middle of the plaza."
  description = """
    This large fountain depicts a circle of men and women holding hands and
    dancing around a central pillar. Water bursts forth from atop the pillar,
    creating a delightful sound as it lands at the figures' feet.
    """
}

def quest chooseAGender {
  name = "He or She?"
  summary = """
    Select your gender by meditating at one of the shrines near Fountain Plaza,
    then return to the cherub.
    """
  requiredQuests = [getSomeClothes]

  phase active {
    summary = "Meditate at one of the two gender shrines near Fountain Plaza."
  }

  phase done {
    summary = "Return to the cherub at Fountain Plaza."
  }
}

def entity cherub: lib.npc {
  brief = "a cherub"
  pose = "hovers nearby, its wings flapping madly."
  description = """
    The cherub is a small, chubby creature with white feathered wings. Although
    its stature and harmless aspect are those of a child, its dark and
    penetrating eyes make it clear this is a creature both ancient and wise.
    """
  offersQuests = [chooseAGender]

  when talk(actor: .quest(chooseAGender, available), self, topic) {
    tell(self, actor) """
      Another new arrival! Good to see you. We're certain to need more heroes of
      your caliber before long. Right now, though, it's high time you chose a
      gender. I assume you remember the difference between males and females
      from your previous life?
      """
    offerQuest(self, chooseAGender, actor)
  }

  after acceptQuest(actor, quest: chooseAGender, self) {
    tell(self, actor) """
      To the east and west you will find statues that symbolize the two sexes.
      Simply `meditate` near the statue that represents your preferred gender.
      Come back to me when you're done.
      """
  }

  when talk(actor: .quest(chooseAGender, active), self, topic) {
    tell(self, actor) "Did you find the statues? They're hard to miss!"
  }

  when talk(actor: .quest(chooseAGender, done), self, topic) {
    tell(self, actor) """
      You did it! I must admit I'm somewhat surprised by your choice. No matter;
      I'm sure I'll get used to it. Eventually.
      """
    completeQuest(actor, chooseAGender)
  }

  when talk(actor, self, topic) {
    tell(self, actor) "Hello there! Do you like my wings? I recently had them waxed."
  }
}

def location fountainPlaza: isleLocation {
  name = "Fountain Plaza"
  description = """
    This hexagonal plaza is paved with multi-colored stone tiles.
    """
  surface = 'stone
  contents = [fountain, cherub]
  exits = [gravelPath -> 'north to clothingStall, gravelPath -> 'south to circleOfNames,
           gravelPath -> 'west to maleShrine, gravelPath -> 'east to femaleShrine]
}

//# maleShrine

def entity maleStatue: fixture {
  brief = "a large marble statue"
  pose = "stands in the center of the plaza."
  description = """
    The statue stands over twelve feet tall. Its form subtly shifts as you view
    it, taking on properties of different races and embodying various masculine
    virtues. It somehow reflects your own personal concept of the perfect male.
    """
}

def location maleShrine: isleLocation {
  name = "Shrine of Masculinity"
  description = """
    Low shrubs, cut in complex geometric patterns, surround a plaza covered with
    white gravel.
    """
  contents = [maleStatue]
  exits = [gravelPath -> 'east to fountainPlaza]

  when meditate(actor: .quest(chooseAGender, active)) {
    show(actor) """
      The statue's mouth begins to move and a deep voice intones several archaic
      words you don't understand.
      """
    changeGender(actor, 'male)
    advanceQuest(actor, chooseAGender)
  }
}

//# femaleShrine

def entity femaleStatue: fixture {
  brief = "a large jade statue"
  pose = "stands in the center of the area."
  description = """
    The statue stands over twelve feet tall. Its eyes seem to follow you. As you
    consider the statue, your thoughts wander; its features change in your
    mind's eye to reflect your personal ideal of femininity.
    """
}

def location femaleShrine: isleLocation {
  name = "Shrine of Femininity"
  description = """
    A multitude of flowering vines have been trained to ornate trellises that
    surround a bowlShaped area covered with a carpet of blossoming clover.
    """
  contents =  [femaleStatue]
  exits = [gravelPath -> 'west to fountainPlaza]

  when meditate(actor: .quest(chooseAGender, active)) {
    show(actor) """
      The statue slowly turns its head to face you and says several arcane words
      in a powerful, mellifluous voice.
      """
    changeGender(actor, 'female)
    advanceQuest(actor, chooseAGender)
  }
}

//# circleOfNames

def entity treeOfNames: fixture {
  brief = "a beautiful tree"
  pose = "grows in the center of the lawn."
  description = """
    The tree has smooth, silvery bark and broad leaves of the deepest green.
    Thousands of names have been written in luminous ink upon its trunk, all
    using the same flowing script.
    """
}

def quest chooseAName {
  name = "Nameless No More"
  summary = """
    Choose your name by saying it in the presence of the orb of naming, then
    return to the mistress of names.
    """
  requiredQuests = [chooseAGender]

  phase active {
    summary = "Find the orb of naming and say your chosen name in its presence."
  }

  phase done {
    summary = "Return to the mistress of names."
  }
}

def entity mistressOfNames: lib.npc {
  brief = "the mistress of names"
  pose = "stands beneath the tree."
  description = """
    The mistress of names is a short, slender woman of indeterminate age. Her
    long auburn hair is bound in a loose ponytail. She wears a pair of
    horn-rimmed spectacles and her clothing is rumpled and ink-stained.
    """
  offersQuests = [chooseAName]

  when talk(actor: .quest(chooseAName, available), self, topic) {
    tell(self, actor) """
      Oh, hello. I didn't see you standing there. I hope you haven't been
      waiting long. How can I help you?

      Ah! You need a name, don't you. You've come to the right place; I'd be
      happy to help you out.
      """
    offerQuest(self, chooseAName, actor)
  }

  after acceptQuest(actor, quest: chooseAName, self) {
    tell(self, actor) """
      Just to the east you'll see a magical orb. Find it and say the word.
      Literally! Stand next to the orb and `say` the word you want to have as
      your name. The orb's power is truly remarkable.

      Once your anonymity has been cured, come back to me so I can record your
      new name on the trunk of this tree with the names of all the other heroes
      who have passed this way.
      """
  }

  when talk(actor: .quest(chooseAName, active), self, topic) {
    tell(self, actor) """
      Still going incognito? You'll find the orb of naming just to the east.
      """
  }

  when talk(actor: .quest(chooseAName, done), self, topic) {
    tell(self, actor) """
      Yes, what is it? Of course, you've chosen your name! Let me see, where is
      my pen? Ah, there it is. And now to write your name...how did you spell
      it, again? Just a few strokes of the pen, and...done!
      """

    completeQuest(actor, chooseAName)

    tell(self, actor) "{actor} is a fine name. Wear it proudly."
  }

  when talk(actor: .quest(chooseAName, complete), self, topic) {
    tell(self, actor) """
      Ah, {actor}. I just love the sound of your name. It simply rolls off the
      tongue!
      """
  }

  when talk(actor, self, topic) {
    show(actor) "The mistress of names frowns at you over her glasses."
  }
}

def location circleOfNames: isleLocation {
  name = "Circle of Names"
  description = """
    You stand within a wide circle of well-tended lawn surrounded by a low stone
    wall.
    """
  contents = [treeOfNames, mistressOfNames]
  exits = [gravelPath -> 'north to fountainPlaza, gravelPath -> 'east to clifftop,
           gravelPath -> 'south to guardStation]
}

//# clifftop

def entity orbOfNaming: fixture {
  brief = "the orb of naming"
  pose = "hovers a few feet above the ground."
  description = """
    The orb is a spherical stone about two feet in diameter. Its surface is
    smooth and cloudy. If a creature speaks a word within its presence, the orb
    has the power to make that word the creature's name.
    """

  after say(actor: .quest(chooseAName, active), message) {
    show(actor) """
      The orb begins to glow, dimly at first, then much more brightly. Sparks
      skitter across its smooth surface and you feel an uncomfortable tingle
      beneath your skin.
      """
    if changeName(actor, message) {
      advanceQuest(actor, chooseAName)
    } else {
      show(actor) "The sparks subside and the orb's glow dims; nothing seems to happen."
    }
  }
}

def location clifftop: isleLocation {
  name = "Windy Clifftop"
  description = """
    You stand atop a rocky cliff that falls perhaps a hundred feet to a narrow
    beach. The wind is brisk and smells of the sea.
    """

  tutorial = """
    To speak, use the `say` command. For example, to say \"hello\", you could
    type `say hello`. Everyone (and everything!) in your location will hear
    what you say.

    In this room, the `look:orb of naming` is always listening, so be
    careful what you say! If you speak a single word that the orb deems
    suitable, that word will become your name. Choose wisely.
    """

  surface = 'stone
  contents = [orbOfNaming]
  exits = [gravelPath -> 'west to circleOfNames]
}

//# guardStation

def entity wornDagger: lib.dagger {
  brief = "a worn dagger"
  description = "The dagger has a pitted copper blade and a smooth wooden handle."
  level = 1
  quality = 'poor
}

def quest killSomePlants {
  name = "Weed Control"
  summary = """
    Prove your worth to the guard by killing a vineling. Lashleaf? Whatever.
    """
  requiredQuests = [chooseAName]

  phase active {
    summary = "Kill a vineling. Lashleaf? Whatever."
  }

  phase done {
    summary = "Return to the guard."
  }
}

def entity guard: lib.npc {
  brief = "a burly guard"
  pose = "stands nearby."
  description = """
    The guard wears a long chainmail shirt and carries a double-bladed axe. His
    bristly red beard spills out across his ample belly.
    """
  offersQuests = [killSomePlants]

  when talk(actor: .quest(killSomePlants, available), self, topic) {
    tell(self, actor) """
      Greetings, {actor}. It seems you're nearly ready to leave this place, but
      I have my doubts. Before I allow you to venture further, I'm going to
      teach you how to fight! You'll need to be able to handle a weapon if you
      want to survive in the real world.
      """
    offerQuest(self, killSomePlants, actor)
  }

  after acceptQuest(actor, quest: killSomePlants, self) {
    tell(self, actor) """
      West of here you'll find some...plants. Not normal plants, but vicious
      killers! Vinelings, I think they're called. Or maybe lashleaves? Whatever.
      The name's not important.

      I have a weapon for you. Here, take this.
      """

    receiveItems(actor, [wornDagger], self)

    tell(self, actor) """
      Go ahead, `equip` that dagger and kill one of those plants. Strike fast
      and true! If you can overcome such a fearsome foe, I'll happily let you
      pass.
      """
  }

  when talk(actor: .quest(killSomePlants, active), self, topic) {
    tell(self, actor) """
      Any progress so far? Kill one of those plant things and we'll talk.
      """
  }

  when talk(actor: .quest(killSomePlants, done), self, topic) {
    tell(self, actor) """
      Great job! I'll confess, those things give me the heebie jeebies. Plants
      shouldn't writhe around like that. Please, feel free to head south
      whenever you like.
      """
    completeQuest(actor, killSomePlants)
  }

  when talk(actor: .quest(killSomePlants, complete), self, topic) {
    show(actor) "The guard salutes smartly."
    tell(self, actor) "Good to see you again, plant-slayer."
  }

  when talk(actor, self, topic) {
    show(actor) "The guard grunts in your general direction."
  }

  allow exitLocation(actor: .quest(killSomePlants, incomplete), location, portal) {
    if portal.direction == 'south {
      show(actor) "The guard moves with unexpected agility to block your path."
      tell(self, actor) """
        Stop right there, friend. You need to complete the tasks set for you by
        myself and my comrades to the north before I can let you pass.
        """
      return false
    }
    return true
  }
}

def entity ironGate: portal {
  brief = "an iron gate"
}

def location guardStation: isleLocation {
  name = "Guard Station"
  description = "A small guard post stands alongside the path."

  tutorial = """
    In your adventures you will have the chance to learn many different
    `help:skills`. Each skill allows you to perform a certain type of action,
    such as fighting with weapons, casting magic spells, or crafting items. The
    more you use a skill, the more your rank in that skill will increase. A
    higher rank allows you to succeed at more difficult tasks.

    The guard here has a quest that will teach you your first weapon skill. Talk
    to him to get started. You can also type `help skills` to learn more about
    skills in general.
    """

  contents = [guard]
  exits = [gravelPath -> 'north to circleOfNames, gravelPath -> 'west to overgrownFieldSe,
           ironGate -> 'south to cobbledSquare]
}

//# overgrownField

def entity lashlingTendril: lib.naturalWeapon {
  brief = "a thorny tendril"
  damageType = 'slashing
  attackVerb = "whips"
  criticalVerb = "lashes"
}

def entity lashling: creature {
  brief = "a lashling"
  pose = "flails its tendrils in a menacing display."
  description = """
    The lashling is a small mass of writhing vines and weeds that has somehow
    gained the ability to move, albeit very slowly. Sharp thorns protrude from
    the ends of its leafy, tentacle-like appendages.
    """
  entryMessage = "A lashling emerges from beneath the weeds."

  level = 1
  attackCoeff = 0.5
  defenseCoeff = 0.5
  weapons = [lashlingTendril]

  before kill(actor, self, weapon) {
    spawn(lashling, self.location, 15)
  }

  after kill(actor: .quest(killSomePlants, active), self, weapon) {
    advanceQuest(actor, killSomePlants)
  }
}

def entity overgrownField: isleLocation {
  name = "Overgrown Field"
  description = "Tangled vines and weeds make it difficult to move through this area."
  surface = 'weeds
  contents = [lashling!]
}

def entity overgrownFieldPortal: lib.continuingPortal {
  brief = "the overgrown field"
}

def location overgrownFieldSe: overgrownField {
  tutorial = """
    To begin attacking a lashling, type `attack lashling`. You will
    automatically perform basic attacks with the weapon in your main hand.
    Combat ends when you or your opponent is dead!

    Depending on the skills you choose to learn as you explore the world, you
    will gain access to a variety of special maneuvers that you can use during
    combat. Type `help combat` to learn more.
    """

  exits = [overgrownFieldPortal -> 'west to overgrownFieldSw,
           overgrownFieldPortal -> 'north to overgrownFieldNe,
           gravelPath -> 'east to guardStation]
}

def location overgrownFieldSw: overgrownField {
  exits = [overgrownFieldPortal -> 'east to overgrownFieldSe,
           overgrownFieldPortal -> 'north to overgrownFieldNw]
}

def location overgrownFieldNe: overgrownField {
  exits = [overgrownFieldPortal -> 'west to overgrownFieldNw,
           overgrownFieldPortal -> 'south to overgrownFieldSe]
}

def location overgrownFieldNw: overgrownField {
  exits = [overgrownFieldPortal -> 'east to overgrownFieldNe,
           overgrownFieldPortal -> 'south to overgrownFieldSw]
}

//# cobbledSquare

def entity sandyPath: portal {
  brief = "a sandy path"
}

def entity cobbledLane: portal {
  brief = "a cobbled lane"
}

def location cobbledSquare: isleLocation {
  name = "Cobbled Square"
  description = """
    The fresh smell of the sea pleasantly fills this small seaside plaza.
    """

  tutorial = """
    Completing quests has given you enough experience to gain a level! By doing
    so you have also gained `help:karma`, which you can use to join
    `help:guilds` and learn `help:skills`. Skills grant you access to special
    actions. As you travel the world, be on the lookout for trainers who can
    induct you into their guilds and teach you a variety of skills.
    """

  surface = 'stone
  exits = [ironGate -> 'north to guardStation, sandyPath -> 'west to beachEast,
           cobbledLane -> 'east to pier, lib.entryDoorway -> 'south to dockmasterShack]
}

//# beach

def entity shinySeashell: item {
  brief = "a shiny seashell"
  description = """
    The seashell's polished surface is covered with an intricate pattern of
    white and orange whorls.
    """
  alts = ["a shiny shell"]
  stackLimit = 10
  size = 'tiny
  icon = 'seashell

  when take(actor, self, source) {
    spawn(shinySeashell, source, random(1800, 7200))
  }
}

def entity beachPortal: lib.continuingPortal {
  brief = "the beach"
}

def entity beachLocation: isleLocation {
  name = "Rocky Beach"
  description = "The sand on this narrow beach is full of pebbles and shell fragments."
  domain = 'outdoor
  surface = 'sand
}

def location beachEast: beachLocation {
  exits = [beachPortal -> 'west to beachCenter, sandyPath -> 'east to cobbledSquare]
}

def location beachCenter: beachLocation {
  exits = [beachPortal -> 'west to beachWest, beachPortal -> 'east to beachEast]
}

def location beachWest: beachLocation {
  exits = [beachPortal -> 'east to beachCenter]
  contents = [shinySeashell!]
}

//# dockmasterShack

def entity bundleOfDocuments: item {
  brief = "a bundle[s] of documents"
  description = """
    The documents are rather mundane shipping records. A scrawled note on top
    reads, \"Pay the messenger 10 silver. Q.M.\"
    """
  quest = documentDelivery
}

def quest documentDelivery {
  name = "On to Arwyck"
  summary = """
    Deliver the dockmaster's documents to the surly stevedore at the Arwyck
    docks.
    """
  requiredQuests = [killSomePlants]

  phase active {
    summary = "Find the surly stevedore in Arwyck."
  }

  phase done {
    summary = "Give the documents to the surly stevedore."
  }
}

def entity dockmaster: lib.npc {
  brief = "the dockmaster"
  pose = "sits behind the desk."
  description = """
    The dockmaster is a grizzled man with a short salt-and-pepper beard. His
    left eye is covered with a leather patch, but his right eye harbors a
    dangerous gleam.
    """
  offersQuests = [documentDelivery]

  when talk(actor: .quest(documentDelivery, available), self, topic) {
    tell(self, actor) """
      You there. I've an errand that needs doing if you've a mind to earn some
      coin.
      """
    offerQuest(self, documentDelivery, actor)
  }

  after acceptQuest(actor, quest: documentDelivery, self) {
    tell(self, actor) "Good, good. Take these."

    receiveItems(actor, [bundleOfDocuments], self)

    tell(self, actor) """
      I need you to deliver those to my man in Arwyck. Surly fellow near the
      docks. Can't miss him. He'll pay you once he has the documents. The ship
      to Arwyck leaves from the dock outside.
      """
  }

  when talk(actor: .quest(documentDelivery, active), self, topic) {
    tell(self, actor) """
      What are you doing here? My man needs those documents. The *Siren* departs
      for Arwyck from the dock just east of here.
      """
  }

  when talk(actor: .quest(documentDelivery, complete), self, topic) {
    tell(self, actor) """
      Thanks for helping me out before. I might have more errands for you in the
      future; be sure to check back.
      """
  }
}

def entity desktopDocuments: fixture {
  brief = "document"
  description = """
    You discreetly scan the papers on top of the pile. They appear to be
    schedules, manifests, and other such shipping-related documents.
    """
  implied = true
}

def entity wineBottles: fixture {
  brief = "wine bottle"
  description = """
    You may have been dead for hundreds of years, but wine hasn't changed all
    that much; you still recognize the cheap stuff when you see it.
    """
  implied = true
}

def location dockmasterShack: isleLocation {
  name = "Dockmaster's Shack"
  description = """
    This one-room structure is dominated by a large desk that is piled with
    documents and empty wine bottles.
    """
  domain = 'indoor
  surface = 'wood
  contents = [dockmaster, desktopDocuments, wineBottles]
  exits = [lib.exitDoorway -> 'north to cobbledSquare,
           lib.stairway -> 'down to dockmasterBasement]
}

//# dockmasterBasement

def location dockmasterBasement: isleLocation {
  name = "Basement of the Dockmaster's Shack"
  description = """
    This low, damp space is more of a crawlspace than a basement. Several
    barrels and crates have been pushed into one corner of the dirt floor.
    """
  domain = 'indoor
  surface = 'dirt
  exits = [lib.stairway -> 'up to dockmasterShack]
}

//# pier

def entity dockSign: fixture {
  brief = "an informative sign"
  pose = "is posted here."
  description = """
    The sign indicates that a ship frequently arrives here to carry passengers
    across the sea to the village of Arwyck.
    """
}

def location pier: isleLocation {
  name = "Sturdy Pier"
  description = """
    This stone pier juts out into the sea, giving ships that visit the isle a
    safe place to dock.
    """

  tutorial = """
    To board a ship for Arwyck, wait until it arrives and then move `east`. Once
    the ship reaches its destination, move `south` to disembark.
    """

  surface = 'stone
  contents = [dockSign]
  exits = [cobbledLane -> 'west to cobbledSquare]
}

def entity gangplank: portal {
  brief = "a gangplank"
}

def entity sailor: lib.npc {
  brief = "a grizzled sailor"
  description = """
    The sailor has a short, salt-and-pepper beard and wears a faded uniform. His
    forearms are unusually burly.
    """

  when talk(actor, self, topic) {
    tell(self, actor) """
      Ahoy! Welcome aboard the *Siren*. Every few moments we make the short run
      between Arwyck and the Isle of Dawn. Relax and enjoy the trip!
      """
  }
}

def location theSiren: lib.routeFollower {
  name = "The *Siren*"
  description = """
    This sturdy single-masted vessel makes frequent trips between the Isle of
    Dawn and the village of Arwyck on the mainland.
    """
  domain = 'outdoor
  surface = 'wood
  surrounding = 'water
  icon = 'boat
  contents = [sailor]

  route = [gangplank -> 'west to pier, gangplank -> 'south to arwyck.westDock]
}
