// This is the starter zone for new characters. It is meant as a basic
// introduction to the game and tutorial for vital mechanics.

defregion {
    name = "Isle of Dawn"
    description = |
        The souls of ancient heroes are reborn atop a sacred hill in the middle
        of this small island. The magical energies of the place allow a soul to
        regain its physical form so it may join the battle against the great
        evil that threatens Atalea.
}

def isle_location: location {
    domain = 'outdoor
    surface = 'grass
}

def gravel_path: portal {
    brief = "a gravel path"
    description = |
        The path's surface of finely crushed white stone contrasts with the lush
        greenery which surrounds you.
}

// hilltop

def standing_stones: fixture {
    brief = "ring of standing stones"
    description = |
        You count nine stones, each about 12 feet tall and four feet wide. The
        faint remains of ornate tracery are barely visible upon their weathered
        surfaces.
    is_obvious = false
}

deflocation hilltop: isle_location {
    name = "Hilltop"
    description = |
        You are standing atop a low hill in the center of a small island. A ring
        of ancient standing stones encircles the crown of the hill. The long
        grass that covers the hillside sways back and forth in the gentle
        breeze.

    tutorial = |
        Welcome to Atalea! As a new player, you will sometimes see green text
        like this. These messages provide tips to help you get started. For
        details, type `help tutorial`.

        A few basics: to move around the world, type the direction you want to
        go. For example, type `south` or `s` to move south. To look at your
        surroundings, type `look`. To look at something specific, add its name
        or description. For example, try `look standing stones` or `look self`.

        Head `south` to begin your adventure!

    contents = [standing_stones!]
    exits = [gravel_path -> 'south to pavilion]
}

// pavilion

def spirit_warden: lib.npc {
    brief = "the spirit warden"
    pose = "stands nearby, smiling amiably."
    description = |
        The spirit warden is an elderly human man, standing well over six feet
        tall. His long white hair and wispy beard frame a wrinkled, grinning
        face. He wears dark blue robes with gold embroidered trim.

    after enter_location(actor: .quest(choose_a_race, available), location, entry) {
        await sleep(1)
        if actor.location == location {
            show(actor, "The spirit warden beckons in your direction.")
        }
    }

    when talk(actor, target: self, topic) {
        tell(self, actor) |
            Welcome to Atalea, hero! Or perhaps I should say "welcome back..."

            I don't know how to explain this, but you died long ago. My
            condolences. For reasons unknown, however, you have been recalled
            from the Dreamlands and once again walk in the physical world.

            My colleagues stand ready to help reorient you after your long
            absence. As you explore this isle, talk to anyone you meet; we are
            all here to help.

            To the south you will meet an odd creature who will get you started.
            Head that way when you are ready.
    }
}

deflocation pavilion: isle_location {
    name = "Pavilion"
    description = |
        An open-air pavilion stands a few feet from the path. Its silk canopy is
        painted in bright colors.

    tutorial = |
        You will often encounter creatures with whom you can interact. They may
        provide useful information or offer rewards if you perform actions on
        their behalf. For example, type `talk warden` to talk to the spirit
        warden. He may have something interesting to say.

    contents = [spirit_warden!]
    exits = [gravel_path -> 'north to hilltop, gravel_path -> 'south to wildflower_field]
}

// wildflower_field

defquest choose_a_race {
    name = "Let's Get Physical"
    summary = |
        Choose your physical form by meditating at one of the racial shrines on
        the Isle of Dawn, then return to the officious kobold.

    phase active {
        summary = "Meditate at any of the racial shrines on the Isle of Dawn."
    }

    phase done {
        summary = "Return to the officious kobold."
    }
}

def officious_kobold: lib.npc {
    brief =  "an officious kobold"
    pose = "sits at a low table in the shade of a large umbrella."
    description = |
        The kobold is a tiny humanoid with reptilian features, sparse wiry hair,
        and knobbly gray skin. It is, however, impeccably groomed.
    offers_quests = [choose_a_race]

    when talk(actor: .quest(choose_a_race, available), self, topic) {
        tell(self, actor) |
            Hello, friend! As you may have noticed, your current body is just a
            ghostly manifestation of your spirit. To fix that you'll need to
            select a race and take on a physical form. It just so happens I can
            help you do exactly that!

        offer_quest(self, choose_a_race, actor)

        show_tutorial(actor, 'offer_quest) |
            The kobold is offering you a quest! Quests are tasks set for you by
            the denizens of the world. Completing them can provide you with many
            kinds of rewards. Type `help quests` for more information.
    }

    after accept_quest(actor, quest: choose_a_race, self) {
        tell(self, actor) |
            Excellent! To the west you will find several shrines, each dedicated
            to a different race. Talk to the caretaker at each shrine to learn
            more about his or her people.

            Then, when you find the race that's right for you, return to the
            selected shrine and `meditate`. The caretaker will, ahem, take care
            of the rest.

            Return to me once you have completed this task.

        show_tutorial(actor, 'accept_quest) |
            You can use the `quest` command to see the quests you've accepted
            and track your progress toward their completion.
    }

    when talk(actor: .quest(choose_a_race, active), self, topic) {
        tell(self, actor) |
            Have you selected a race yet? The caretakers to the west will be
            more than happy to describe their races and help you make the right
            decision.
    }

    when talk(actor: .quest(choose_a_race, done), self, topic) {
        tell(self, actor) |
            A fine choice! I had no doubt you would choose to become
            {actor.race:i}. I am something of an expert in these matters, after
            all.

            I can't help but notice that your new body, while quite lovely, is
            also quite naked. Aren't you cold? To the south you will find my
            friend Dhalia, the seamstress; talk to her and she will make sure
            you go forth in style.

        complete_quest(actor, choose_a_race)
    }

    when talk(actor, self, topic) {
        tell(self, actor) |
            Good to see you again! You may have heard that some of my kind have
            occupied an old copper mine, deep in the forest west of Arwyck. I
            assure you I have nothing whatsoever to do with those filthy
            creatures, despite our shared ancestry.
    }
}

deflocation wildflower_field: isle_location {
    name = "Field of Wildflowers"
    description = |
        Flowers of every color and description bloom in the expansive fields
        along the sides of the path. The air is heavy with their fragrance.
    surface = 'flowers

    tutorial = |
        The ! symbol on the map means that a creature wants to talk to you about
        an available quest. You can `talk` to the creature to learn more. When
        you see the &#x22ef; symbol, you can `talk` to the creature about a quest
        you have accepted but not yet completed. If you see the &#x2713; symbol,
        then you have completed a quest and can `talk` to the creature to
        receive your rewards!

        The kobold has a quest for you. Try typing `talk kobold`.

    contents = [officious_kobold!]
    exits = [gravel_path -> 'north to pavilion, gravel_path -> 'south to clothing_stall,
             gravel_path -> 'west to human_shrine]
}

// human_shrine

def human_caretaker: lib.npc {
    brief = "the human caretaker"
    pose = "stands nearby with a welcoming expression."
    description = |
        The caretaker is a tall, athletic woman wearing a practical leather
        outfit and a broad-brimmed hat. Various gardening tools hang from her
        wide leather belt.

    when talk(actor: .quest(choose_a_race, active), self, topic) {
        tell(self, actor) |
            Hello, traveler. I imagine you are curious about humans. Here is
            what I can tell you.

            First and foremost, humans are known for their optimism and their
            adaptability. We feel like we can do anything, and do it well.
            Perhaps you've heard the expression, "Jack of all trades, master of
            none?" Some might consider it a negative, but we humans take pride
            in our ability to do a little bit of everything.

            Second, humans are especially noted for their skill as gatherers and
            farmers. We are adept at using our ingenuity to extract the bounty
            of the earth.

            If you want to join humankind, `meditate` here. I will then use the
            power of the shrine to complete your transformation.
    }
}

deflocation human_shrine: isle_location {
    name = "Shrine of Humanity"
    description = |
        This part of the isle is a large garden. Plants bearing flowers, fruits,
        and vegetables are arranged in orderly rows. The soil is dark and
        fertile.
    contents = [human_caretaker!]
    exits = [gravel_path -> 'east to wildflower_field, gravel_path -> 'north to elven_shrine,
             gravel_path -> 'west to ogre_shrine]

    when meditate(actor: .quest(choose_a_race, active)) {
        show(actor) |
            A calming warmth suffuses your being. The caretaker smiles
            broadly as she reaches out to you with her open hand, holding it
            inches from your ghostly form. She smiles broadly as the warmth
            spreads to her hand.

            After a moment she closes her palm. You see a faint glow between
            her fingers which quickly grows brighter. When she opens her
            hand she holds a tiny seedling, its delicate leaves unfolding
            before your eyes.
        change_race(actor, lib.human)
        advance_quest(actor, choose_a_race)
    }

    when meditate(actor) {
        show(actor) "The caretaker nods in approval."
    }
}

// elven_shrine

def wooden_sculpture: fixture {
    brief = "a wooden sculpture"
    pose = "stands in the middle of the ring of trees."
    description = |
        The sculpture is carved from polished yellow wood. Its form is fluid and
        abstract but somehow evokes images of towering forest oaks and hidden
        woodland dells. Golden-brown moss grows in chaotic yet precise patterns
        along its sides. Atop the sculpture rests a shallow bowl made of green
        glass. The bowl contains clear, cold water.
}

def elven_caretaker: lib.npc {
    brief = "the elven caretaker"
    pose = "kneels beside one of the trees, her eyes closed."
    description = |
        The elven caretaker is a graceful young woman with striking emerald eyes
        and long, silver hair arranged in complex braids. She wears a pale green
        dress with embroidered trim.

    when talk(actor: .quest(choose_a_race, active), self, topic) {
        tell(self, actor) |
            Greetings, stranger. Be welcome in this place. No doubt you have
            come here to learn something about my people. I will tell you what I
            can.

            Mine are a peaceful, thoughtful people who love and respect nature.
            This was not always so; millenia ago we nearly destroyed ourselves
            with our prideful, warlike ways. It took a terrible crisis for my
            ancestors to change. I pray that we never slide back into those
            habits that nearly left us extinct.

            Elves are quick-footed and quick-witted, although we are not as
            strong as many of the other races of Atalea. We excel as hunters,
            magicians, bards, and---it pains me to say---as thieves. We consider
            ourselves custodians of the forest and take that charge very
            seriously. We do not stand idly by if our beloved home is
            threatened.

            If you would join my folk, simply `meditate` here to make your
            purpose known; the shrine's power will do the rest.
    }
}

deflocation elven_shrine: isle_location {
    name = "Shrine of the Forest"
    description = |
        A low wooden fence surrounds a perfect ring of thirteen graceful birch
        trees. The area radiates an aura of tranquility.
    surface = "forest"
    contents = [wooden_sculpture!, elven_caretaker!]
    exits = [gravel_path -> 'south to human_shrine, gravel_path -> 'north to sidhe_shrine,
             gravel_path -> 'west to goblin_shrine]

    when meditate(actor: .quest(choose_a_race, active)) {
        show(actor) |
            The caretaker approaches the nearby sculpture and raises her hands
            to the sky. Motes of light rise from the bowl atop the sculpture;
            they quickly become so bright you are forced to look away. A
            swirling wind rises and the trees begin to sway, their leaves
            glimmering in the light. Soon the motes move toward you, surrounding
            you with their light and warmth.

            After a few moments the wind dies down and the motes dissolve into
            tiny sparkling flecks which quickly disperse in the dying breeze.
            The clearing is calm once again.
        change_race(actor, lib.elf)
        advance_quest(actor, choose_a_race)
    }

    when meditate(actor) {
        show(actor) "The caretaker bows respectfully."
    }
}

// sidhe_shrine

def sidhe_caretaker: lib.npc {
    brief = "the sidhe caretaker"
    pose = "stands nearby, lost in thought."
    description = |
        The sidhe caretaker is a tall, gaunt man with a stern look. His long
        white hair is pulled back into a ponytail that nearly reaches the
        ground. He wears dark robes of a rather elaborate and archaic style.

    when talk(actor: .quest(choose_a_race, active), self, topic) {
        tell(self, actor) |
            Well, well. Another hero, reborn. I suppose I should tell you
            something of my race, although I find it unlikely you were fortunate
            enough to be a member of the Fair Folk in your past life.

            For uncounted millenia, my people lived in an alternate plane of
            existence called the Shadowlands. A few short centuries ago, war
            with demons drove us out of our homeland. We ended up here.

            At our core, we sidhe are creatures of magic. It is our very
            essence. Few sidhe have become famous warriors or minstrels,
            although of course it is possible. But all of our people have some
            small skill in magic, and many have become wizards of reknown.

            I cannot say it seems likely, but if you believe you are truly one
            of us then I encourage you to `meditate` before the shrine. If you
            are found worthy, I will welcome you into the fold.
    }
}

def alien_tree: fixture {
    brief = "a tree"
    description = |
        The tree is clearly very old. You get a strange sense that it does not
        belong in this world.
    is_obvious = false
}

def runed_boulder: fixture {
    brief = "a boulder"
    description = |
        Upon closer inspection, you notice that the entire surface of the
        boulder is covered with tiny rune-like markings.
    is_obvious = false
}

deflocation sidhe_shrine: isle_location {
    name = "Shrine of Shadows"
    description = |
        A lone tree grows atop an enormous granite boulder. Its gnarled, gray
        roots wrap around the stone before sinking into the fertile earth below.
        The tree's twisted branches splay outward and its dense leaves form a
        solid canopy that condemns this part of the isle to perpetual shadow.
    surface = "forest"
    contents = [sidhe_caretaker!, alien_tree!, runed_boulder!]
    exits = [gravel_path -> 'south to elven_shrine, gravel_path -> 'west to dwarven_shrine]

    when meditate(actor: .quest(choose_a_race, active)) {
        show(actor) |
            As you begin your meditation, the shadows in the area deepen. The
            leaves above begin to rustle, as if the tree is growing restless.

            You vision begins to blur. Shifting figures appear, ghosts of
            creatures from another world. They call to you in an alien language
            you have never heard.

            After a moment, you begin to understand their words. You answer
            their calls, but the meaning of your words is lost as soon as they
            are uttered. Apparently satisfied, the figures disappear; the
            shadows retreat.
        change_race(actor, lib.sidhe)
        advance_quest(actor, choose_a_race)
    }

    when meditate(actor) {
        show(actor) "The caretaker arches an eyebrow."
    }
}

// dwarven_shrine

def dwarven_caretaker: lib.npc {
    brief = "the dwarven caretaker"
    pose = "stands proudly amid the statues."
    description = |
        The dwarven caretaker stands about four feet tall, with shoulders nearly
        as wide. He wears full chain mail, even in the heat of the day. His
        armor appears to be of fine workmanship. A heavy maul hangs from his
        belt. His long, red beard falls across a belly that has seen a few pints
        of ale in its day.

    when talk(actor: .quest(choose_a_race, active), self, topic) {
        tell(self, actor) |
            Well met! If it's a dwarf ye wanna be, then ye be at tha
            right place. I kinna imagine wantin' ta be anythin' else!

              Me people may be wee, but we have tha strength of tha mountains
              within us! Aye, it's true, we have a great love for gold and gems.
              But we have nae great love for tha dark beasties that lurk below
              tha earth. We dwarves are great crafters and even greater at
              fightin', when tha times require it.

              If ye think that all sounds good, then get ta meditatin'!
    }
}

deflocation dwarven_shrine: isle_location {
    name = "Shrine of the Mountain"
    description = |
        Rows of stone statues stand in the tall grass, each depicting a stout
        warrior with a grim expression and glowing amber eyes. The statues are
        arrayed in formation like soldiers marching to battle.
    contents = [dwarven_caretaker!]
    exits = [gravel_path -> 'east to sidhe_shrine, gravel_path -> 'south to goblin_shrine]

    when meditate(actor: .quest(choose_a_race, active)) {
        show(actor) |
            The caretaker grasps his maul with both hands and holds it out
            before him. After a moment the hammer begins to vibrate and erupts
            with amber light, echoing the statues' eyes. The vibrations grow
            stronger and emanate outward from the caretaker's body. Soon the
            entire area is shaking and the statues begin to rock back and forth.

            A powerful voice intones, "You have chosen. So be it. Strong as
            stone, bright as steel. May you bring honor to clan and king."

            Without warning the shaking stops and the light dissipates.
        change_race(actor, lib.dwarf)
        advance_quest(actor, choose_a_race)
    }

    when meditate(actor) {
        show(actor) "The caretaker joins you in silent reflection."
    }
}

// goblin_shrine

def chessboard: fixture {
    brief = "a stone chessboard"
    pose = "rests atop a low table."
    description = |
        The chessboard is remarkable for its pieces: each is a finely detailed
        and garishly-painted rendition of a creature who looks much like the
        caretaker. The pieces are so realistic they seem almost alive.
    is_obvious = false
}

def goblin_caretaker: lib.npc {
    brief = "the goblin caretaker"
    pose = "stands beside a chessboard, apparently pondering his next move."
    description = |
        The caretaker is a short, big-eared creature with greenish-blue skin. In
        contrast with his somewhat comical proportions and garish attire, his
        large dark eyes evince a keen intellect.

    when talk(actor: .quest(choose_a_race, active), self, topic) {
        tell(self, actor) |
            Hello, friend! I can't tell you how happy I am to see your interest
            in goblinkind. We are a misunderstood folk! Let me set the record
            straight.

            Goblins are small in stature but we have big dreams. Mostly dreams
            of wealth, it's true, but there's nothing wrong with a little
            spending cash, eh?

            Some larger folks will tell you we are thieves, beggars, and worse.
            That is so mostly untrue! The majority of us would rather get rich
            through shrewd business practices and hard bargaining than by using
            less savory methods.

            When those ignorant louts take offense at our methods, it certainly
            helps that we're quick and stealthy by nature. You won't see many
            goblins waving huge swords around, but as they say, \"Size isn't
            everything!\"

            If you feel like you're one of us at heart, why not become one of us
            in body, too? Just `meditate` here and the deed will be done.
    }
}

deflocation goblin_shrine: isle_location {
    name = "Shrine of Fortune"
    description = |
        The ground here has been cleared, leveled, and surfaced with
        multi_colored bricks.
    surface = "stone"
    contents = [chessboard!, goblin_caretaker!]
    exits = [gravel_path -> 'north to dwarven_shrine, gravel_path -> 'south to ogre_shrine,
             gravel_path -> 'east to elven_shrine]

    when meditate(actor: .quest(choose_a_race, active)) {
        show(actor) |
            As soon as you close your eyes, you have a vision of the world
            around you getting larger...or are you getting smaller? For a moment
            you are stricken with vertigo as the world shifts and spins.

            Once the dizziness passes, you open your eyes to find that your
            stature and greenish skin now match those of the caretaker.
        change_race(actor, lib.goblin)
        tell(self, actor) "Huzzah! Welcome to the family!"
        advance_quest(actor, choose_a_race)
    }

    when meditate(actor) {
        show(actor) "The caretaker leaves you to your meditation."
    }
}

// ogre_shrine

def ogre_caretaker: lib.npc {
    brief = "the ogre caretaker"
    pose = "is here, casually pulverizing rocks with his hammer."
    description = |
        The caretaker is a hulking figure, standing over eight feel tall. He
        wears an iron helm, iron gauntlets, and a breechclout. He carries an
        enormous iron sledgehammer.

    when talk(actor: .quest(choose_a_race, active), self, topic) {
        tell(self, actor) |
            Ugh. I be ogre of few words, but I know what you want. I tell you of
            my kin. We big. We strong. Done!

            You came to `meditate`? Ha. If you wanna be ogre, do it. Done!
    }
}

deflocation ogre_shrine: isle_location {
    name = "Shrine of Strength"
    description = |
        This area is choked with a haphazard collection of rough stone blocks,
        many overgrown with vines and twisting grasses. The blocks' surfaces
        have been crudely painted with scenes of carnage featuring enormous
        warriors laying waste to their tiny assailants.
    surface = "stone"
    contents = [ogre_caretaker!]
    exits = [gravel_path -> 'north to goblin_shrine, gravel_path -> 'east to human_shrine]

    when meditate(actor: .quest(choose_a_race, active)) {
        show(actor) |
            The caretaker selects a boulder and tosses it on the ground before
            you. He then steps over, raises his hammer, and crushes the rock as
            he lets out an enormous belly laugh.

            Rocks fly around. Muscles grow. Brain shrink.
        change_race(actor, lib.ogre)
        advance_quest(actor, choose_a_race)
    }

    when meditate(actor) {
        show(actor) "The caretaker chuckles and crushes another boulder."
    }
}

// clothing_stall

def simple_shirt: lib.shirt {
    brief = "a simple cotton shirt"
    description = |
        The shirt is well-made and comfortable if not entirely fashionable.
}

def simple_pants: lib.pants {
    brief = "a pair of cotton pants"
    description = |
        The pants are made of thick brown cloth. They have been patched only a
        handful of times.
}

def canvas_shoes: lib.shoes {
    brief = "a pair of canvas shoes"
    description = |
        These low shoes have a sturdy sole. They seem suitable for walking
        long distances.
}

def small_backpack: lib.backpack {
    brief = "a small canvas backpack"
    description = |
        The backpack has wide leather straps and a drawstring closure.
}

defquest get_some_clothes {
    name = "Cover Up"
    summary = |
        Pick a white tulip for Dhalia, then exchange it for a set of clothes.
    required_quests = [choose_a_race]

    phase active {
        summary = "Pick a white tulip from the fields east of the clothing stall."
    }

    phase done {
        summary = "Return the tulip to Dhalia."
    }
}

def seamstress: lib.npc {
    brief = "Dhalia"
    pose = "stands in the stall, organizing her wares."
    description = |
        Dhalia is a human woman of indeterminate age. She wears silver-rimmed
        spectacles and an impeccably-tailored dress decorated with a floral
        pattern.
    offers_quests = [get_some_clothes]

    when talk(actor: .quest(get_some_clothes, available), self, topic) {
        tell(self, actor) |
            Greetings! Did our mutual kobold friend send you my way? It
            certainly seems you have need of my wares. I will happily provide
            you with an outfit that should serve your needs, but I must ask a
            favor in return.
        offer_quest(self, get_some_clothes, actor)
    }

    after accept_quest(actor, quest: get_some_clothes, self) {
        tell(self, actor) |
            Wonderful! You see, I am very fond of white tulips, but my work here
            prevents me from taking the time to gather them. Would you head to
            the east and get one for me?
    }

    when talk(actor: .quest(get_some_clothes, active), self, topic) {
        tell(self, actor) |
            Have you found a white tulip for me? They're just to the east.
    }

    when talk(actor: .quest(get_some_clothes, done), self, topic) {
        give_item(actor, white_tulip, self)

        tell(self, actor) |
            Why thank you, this tulip is lovely! Your timing is perfect; I have
            just finished selecting an outfit for you.

        receive_items(actor, [simple_shirt, simple_pants, canvas_shoes, small_backpack], self)

        complete_quest(actor, get_some_clothes)

        show_tutorial(actor, 'items) |
            The seamstress has given you several items; type `inventory` or
            `inv` to list them.

            To wear an item, use the `equip` command. For example, type `equip
            shirt`. Type just `equip` to list the items you currently have
            equipped.

            In addition to clothing, the seamstress also gave you a backpack.
            Equipping it will increase the number of items you can carry.

            For more information type `help equip` or `help inventory`.
    }
}

deflocation clothing_stall: isle_location {
    name = "Clothing Stall"
    description = |
        A wooden market stall has been erected beside the path. Its counter is
        piled with basic clothing items in myriad styles and sizes.
    contents = [seamstress!]
    exits = [gravel_path -> 'north to wildflower_field, gravel_path -> 'south to fountain_plaza,
             gravel_path -> 'east to tulip_field_sw]
}

// tulip_field

def white_tulip: item {
    brief = "a white tulip"
    pose = "draws your attention."
    description = |
        The tulip is quite lovely; you can see why Dhalia prizes them.
    size = 'small  // FIXME:
    entry_pose = "catches your eye."
    quest = get_some_clothes
    stack_limit = 1

    when take(actor, self, source) {
        spawn(white_tulip, source, 15)
        advance_quest(actor, get_some_clothes)
    }
}

def tulip_field_portal: lib.continuing_portal {
    brief = "the tulip field"
}

def tulip_field: isle_location {
    name = "Field of Tulips"
    description = |
        Tulips in myriad colors have been planted here.
    surface = 'flowers
    contents = [white_tulip]
}

deflocation tulip_field_sw: tulip_field {
    tutorial = |
        Some items can be picked up using the `take` command. For example, type
        `take tulip` to take a white tulip when you see one. Picking up an item
        places it into your inventory. Use the `inventory` command to list the
        items you are carrying.
    exits = [gravel_path -> 'west to clothing_stall, tulip_field_portal -> 'east to tulip_field_se,
             tulip_field_portal -> 'north to tulip_field_nw]
}

deflocation tulip_field_se: tulip_field {
    exits = [tulip_field_portal -> 'west to tulip_field_sw, tulip_field_portal -> 'north to tulip_field_ne]
}

deflocation tulip_field_nw: tulip_field {
    exits = [tulip_field_portal -> 'east to tulip_field_ne, tulip_field_portal -> 'south to tulip_field_sw]
}

deflocation tulip_field_ne: tulip_field {
    exits = [tulip_field_portal -> 'west to tulip_field_nw, tulip_field_portal -> 'south to tulip_field_se]
}

// fountain_plaza

def fountain: fixture {
    brief = "a stone fountain"
    pose = "stands in the middle of the plaza."
    description = |
        This large fountain depicts a circle of men and women holding hands and
        dancing around a central pillar. Water bursts forth from atop the
        pillar, creating a delightful sound as it lands at the figures' feet.
}

defquest choose_a_gender {
    name = "He or She?"
    summary = |
        Select your gender by meditating at one of the shrines near Fountain
        Plaza, then return to the cherub.
    required_quests = [get_some_clothes]

    phase active {
        summary = |
            Meditate at one of the two gender shrines near Fountain Plaza.
    }

    phase done {
        summary = "Return to the cherub at Fountain Plaza."
    }
}

def cherub: lib.npc {
    brief = "a cherub"
    pose = "hovers nearby, its wings flapping madly."
    description = |
        The cherub is a small, chubby creature with white feathered wings.
        Although its stature and harmless aspect are those of a child, its dark
        and penetrating eyes make it clear this is a creature both ancient and
        wise.
    offers_quests = [choose_a_gender]

    when talk(actor: .quest(choose_a_gender, available), self, topic) {
        tell(self, actor) |
            Another new arrival! Good to see you. We're certain to need more
            heroes of your caliber before long. Right now, though, it's high
            time you chose a gender. I assume you remember the difference
            between males and females from your previous life?
        offer_quest(self, choose_a_gender, actor)
    }

    after accept_quest(actor, quest: choose_a_gender, self) {
        tell(self, actor) |
            To the east and west you will find statues that symbolize the two
            sexes. Simply `meditate` near the statue that represents your
            preferred gender. Come back to me when you're done.
    }

    when talk(actor: .quest(choose_a_gender, active), self, topic) {
        tell(self, actor) "Did you find the statues? They're hard to miss!"
    }

    when talk(actor: .quest(choose_a_gender, done), self, topic) {
        tell(self, actor) |
            You did it! I must admit I'm somewhat surprised by your
            choice. No matter; I'm sure I'll get used to it. Eventually.
        complete_quest(actor, choose_a_gender)
    }

    when talk(actor, self, topic) {
        tell(self, actor) |
            Hello there! Do you like my wings? I recently had them waxed.
    }
}

deflocation fountain_plaza: isle_location {
    name = "Fountain Plaza"
    description = |
        This hexagonal plaza is paved with multi-colored stone tiles.
    surface = 'stone
    contents = [fountain!, cherub!]
    exits = [gravel_path -> 'north to clothing_stall, gravel_path -> 'south to circle_of_names,
             gravel_path -> 'west to male_shrine, gravel_path -> 'east to female_shrine]
}

// male_shrine

def male_statue: fixture {
    brief = "a large marble statue"
    pose = "stands in the center of the plaza."
    description = |
        The statue stands over twelve feet tall. Its form subtly shifts as you
        view it, taking on properties of different races and embodying various
        masculine virtues. It somehow reflects your own personal concept of the
        perfect male.
}

deflocation male_shrine: isle_location {
    name = "Shrine of Masculinity"
    descrpiton = |
        Low shrubs, cut in complex geometric patterns, surround a plaza covered
        with white gravel.
    contents = [male_statue!]
    exits = [gravel_path -> 'east to fountain_plaza]

    when meditate(actor: .quest(choose_a_gender, active)) {
        show(actor) |
            The statue's mouth begins to move and a deep voice intones several
            archaic words you don't understand.
        change_gender(actor, 'male)
        advance_quest(actor, choose_a_gender)
    }
}

// female_shrine

def female_statue: fixture {
    brief = "a large jade statue"
    pose = "stands in the center of the area."
    description = |
        The statue stands over twelve feet tall. Its eyes seem to follow you. As
        you consider the statue, your thoughts wander; its features change in
        your mind's eye to reflect your personal ideal of femininity.
}

deflocation female_shrine: isle_location {
    name = "Shrine of Femininity"
    description = |
        A multitude of flowering vines have been trained to ornate trellises
        that surround a bowl_shaped area covered with a carpet of blossoming
        clover.
    contents =  [female_statue!]
    exits = [gravel_path -> 'west to fountain_plaza]

    when meditate(actor: .quest(choose_a_gender, active)) {
        show(actor) |
            The statue slowly turns its head to face you and says several arcane
            words in a powerful, mellifluous voice.
        change_gender(actor, 'female)
        advance_quest(actor, choose_a_gender)
    }
}

// circle_of_names

def tree_of_names: fixture {
    brief = "a beautiful tree"
    pose = "grows in the center of the lawn."
    description = |
        The tree has smooth, silvery bark and broad leaves of the deepest green.
        Thousands of names have been written in luminous ink upon its trunk, all
        using the same flowing script.
}

defquest choose_a_name {
    name = "Nameless No More"
    summary = |
        Choose your name by saying it in the presence of the orb of naming, then
        return to the mistress of names."
    required_quests = [choose_a_gender]

    phase active {
        summary = |
            Find the orb of naming and say your chosen name in its presence.
    }

    phase done {
        summary = |
            Return to the mistress of names.
    }
}

def mistress_of_names: lib.npc {
    brief = "the mistress of names"
    pose = "stands beneath the tree."
    description = |
        The mistress of names is a short, slender woman of indeterminate age.
        Her long auburn hair is bound in a loose ponytail. She wears a pair of
        horn-rimmed spectacles and her clothing is rumpled and ink-stained.
    offers_quests = [choose_a_name]

    when talk(actor: .quest(choose_a_name, available), self, topic) {
        tell(self, actor) |
            Oh, hello. I didn't see you standing there. I hope you haven't been
            waiting long. How can I help you?

            Ah! You need a name, don't you. You've come to the right place; I'd
            be happy to help you out.
        offer_quest(self, choose_a_name, actor)
    }

    after accept_quest(actor, quest: choose_a_name, self) {
        tell(self, actor) |
            Just to the east you'll see a magical orb. Find it and say the word.
            Literally! Stand next to the orb and `say` the word you want to have
            as your name. The orb's power is truly remarkable.

            Once your anonymity has been cured, come back to me so I can record
            your new name on the trunk of this tree with the names of all the
            other heroes who have passed this way.
    }

    when talk(actor: .quest(choose_a_name, active), self, topic) {
        tell(self, actor) |
            Still going incognito? You'll find the orb of naming just to the
            east.
    }

    when talk(actor: .quest(choose_a_name, done), self, topic) {
        tell(self, actor) |
            Yes, what is it? Of course, you've chosen your name! Let
            me see, where is my pen? Ah, there it is. And now to write your name...how
            did you spell it, again? Just a few strokes of the pen, and...done!

        complete_quest(actor, choose_a_name)

        tell(self, actor) |
            {actor} is a fine name. Wear it proudly.
    }

    when talk(actor: .quest(choose_a_name, complete), self, topic) {
        tell(self, actor) |
            Ah, {actor}. I just love the sound of your name! It simply rolls off
            the tongue.
    }

    when talk(actor, self, topic) {
        show(actor) "The mistress of names frowns at you over her glasses."
    }
}

deflocation circle_of_names: isle_location {
    name = "Circle of Names"
    description = |
        You stand within a wide circle of well-tended lawn surrounded by a low
        stone wall.
    contents = [tree_of_names!, mistress_of_names!]
    exits = [gravel_path -> 'north to fountain_plaza, gravel_path -> 'east to clifftop,
             gravel_path -> 'south to guard_station]
}

// clifftop

def orb_of_naming: fixture {
    brief = "the orb of naming"
    pose = "hovers a few feet above the ground."
    description = |
        The orb is a spherical stone about two feet in diameter. Its surface is
        smooth and cloudy. If a creature speaks a word within its presence, the
        orb has the power to make that word the creature's name.

    after say(actor: .quest(choose_a_name, active), message) {
        show(actor) |
            The orb begins to glow, dimly at first, then much more brightly.
            Sparks skitter across its smooth surface and you feel an
            uncomfortable tingle beneath your skin.
        if change_name(actor, message) {
            advance_quest(actor, choose_a_name)
        } else {
            show(actor) |
                The sparks subside and the orb's glow dims; nothing seems to
                happen.
        }
    }
}

deflocation clifftop: isle_location {
    name = "Windy Clifftop"
    description = |
        You stand atop a rocky cliff that falls perhaps a hundred feet to a
        narrow beach. The wind is brisk and smells of the sea.

    tutorial = |
        To speak, use the `say` command. For example, to say "hello", you could
        type `say hello`. Everyone (and everything!) in your location will hear
        what you say.

        In this room, the `look:orb of naming` is always listening, so be
        careful what you say! If you speak a single word that the orb deems
        suitable, that word will become your name. Choose wisely.

    surface = 'stone
    contents = [orb_of_naming!]
    exits = [gravel_path -> 'west to circle_of_names]
}

// guard_station

def worn_dagger: lib.dagger {
    brief = "a worn dagger"
    description = |
        The dagger has a pitted copper blade and a smooth wooden handle.
    level = 1
    quality = 'poor
}

defquest kill_some_plants {
    name = "Weed Control"
    summary = |
        Prove your worth to the guard by killing a vineling. Lashleaf? Whatever.
    required_quests = [choose_a_name]

    phase active {
        summary = "Kill a vineling. Lashleaf? Whatever."
    }

    phase done {
        summary = "Return to the guard."
    }
}

def guard: lib.npc {
    brief = "a burly guard"
    pose = "stands nearby."
    description = |
        The guard wears a long chainmail shirt and carries a double-bladed axe.
        His bristly red beard spills out across his ample belly.
    offers_quests = [kill_some_plants]

    when talk(actor: .quest(kill_some_plants, available), self, topic) {
        tell(self, actor) |
            Greetings, {actor}. It seems you're nearly ready to leave this
            place, but I have my doubts. Before I allow you to venture further,
            I'm going to teach you how to fight! You'll need to be able to
            handle a weapon if you want to survive in the real world.
        offer_quest(self, kill_some_plants, actor)
    }

    after accept_quest(actor, quest: kill_some_plants, self) {
        tell(self, actor) |
            West of here you'll find some...plants. Not normal plants, but
            vicious killers! Vinelings, I think they're called. Or maybe
            lashleaves? Whatever. The name's not important.

            I have a weapon for you. Here, take this.

        receive_items(actor, [worn_dagger], self)

        tell(self, actor) |
            Go ahead, `equip` that dagger and kill one of those plants. Strike
            fast and true! If you can overcome such a fearsome foe, I'll happily
            let you pass.
    }

    when talk(actor: .quest(kill_some_plants, active), self, topic) {
        tell(self, actor) |
            Any progress so far? Kill one of those plant things and we'll talk.
    }

    when talk(actor: .quest(kill_some_plants, done), self, topic) {
        tell(self, actor) |
            Great job! I'll confess, those things give me the heebie jeebies.
            Plants shouldn't writhe around like that. Please, feel free to head
            south whenever you like.
        complete_quest(actor, kill_some_plants)
    }

    when talk(actor: .quest(kill_some_plants, complete), self, topic) {
        show(actor) "The guard salutes smartly."
        tell(self, actor) "Good to see you again, plant-slayer."
    }

    when talk(actor, self, topic) {
        show(actor) "The guard grunts in your general direction."
    }

    allow exit_location(actor: .quest(kill_some_plants, incomplete), location, portal) {
        if portal.direction == 'south {
            show(actor) "The guard moves with unexpected agility to block your path."
            tell(self, actor) |
                Stop right there, friend. You need to complete the tasks set for
                you by myself and my comrades to the north before I can let you
                pass.
            return false
        }
        return true
    }
}

def iron_gate: portal {
    brief = "an iron gate"
}

deflocation guard_station: isle_location {
    name = "Guard Station"
    description = "A small guard post stands alongside the path."

    tutorial = |
        In your adventures you will have the chance to learn many different
        `help:skills`. Each skill allows you to perform a certain type of
        action, such as fighting with weapons, casting magic spells, or crafting
        items. The more you use a skill, the more your rank in that skill will
        increase. A higher rank allows you to succeed at more difficult tasks.

        The guard here has a quest that will teach you your first weapon skill.
        Talk to him to get started. You can also type `help skills` to learn
        more about skills in general.

    contents = [guard!]
    exits = [gravel_path -> 'north to circle_of_names, gravel_path -> 'west to overgrown_field_se,
             iron_gate -> 'south to cobbled_square]
}

// overgrown_field

def lashling_tendril: lib.natural_weapon {
    brief = "a thorny tendril"
    damage_type = 'slashing
    attack_verb = "whips"
    critical_verb = "lashes"
}

def lashling: creature {
    brief = "a lashling"
    pose = "flails its tendrils in a menacing display."
    description = |
        The lashling is a small mass of writhing vines and weeds that has
        somehow gained the ability to move, albeit very slowly. Sharp thorns
        protrude from the ends of its leafy, tentacle-like appendages.
    entry_message = "A lashling emerges from beneath the weeds."

    level = 1
    attack_coeff = 0.5
    defense_coeff = 0.5
    weapons = [lashling_tendril]

    before kill(actor, self, weapon) {
        spawn(lashling, self.location, 15)
    }

    after kill(actor, self, weapon) {
        advance_quest(actor, kill_some_plants)
    }
}

def overgrown_field: isle_location {
    name = "Overgrown Field"
    description = "Tangled vines and weeds make it difficult to move through this area."
    surface = 'weeds
    contents = [lashling]
}

def overgrown_field_portal: lib.continuing_portal {
    brief = "the overgrown field"
}

deflocation overgrown_field_se: overgrown_field {
    tutorial = |
        To begin attacking a lashling, type `attack lashling`. You will
        automatically perform basic attacks with the weapon in your main hand.
        Combat ends when you or your opponent is dead!

        Depending on the skills you choose to learn as you explore the world,
        you will gain access to a variety of special maneuvers that you can use
        during combat. Type `help combat` to learn more.

    exits = [overgrown_field_portal -> 'west to overgrown_field_sw,
             overgrown_field_portal -> 'north to overgrown_field_ne,
             gravel_path -> 'east to guard_station]
}

deflocation overgrown_field_sw: overgrown_field {
    exits = [overgrown_field_portal -> 'east to overgrown_field_se,
             overgrown_field_portal -> 'north to overgrown_field_nw]
}

deflocation overgrown_field_ne: overgrown_field {
    exits = [overgrown_field_portal -> 'west to overgrown_field_nw,
             overgrown_field_portal -> 'south to overgrown_field_se]
}

deflocation overgrown_field_nw: overgrown_field {
    exits = [overgrown_field_portal -> 'east to overgrown_field_ne,
             overgrown_field_portal -> 'south to overgrown_field_sw]
}

// cobbled_square

def sandy_path: portal {
    brief = "a sandy path"
}

def cobbled_lane: portal {
    brief = "a cobbled lane"
}

deflocation cobbled_square: isle_location {
    name = "Cobbled Square"
    description = |
        The fresh smell of the sea pleasantly fills this small seaside plaza.

    tutorial = |
        Completing quests has given you enough experience to gain a level! By
        doing so you have also gained `help:karma`, which you can use to join
        `help:guilds` and learn `help:skills`. Skills grant you access to
        special actions. As you travel the world, be on the lookout for trainers
        who can induct you into their guilds and teach you a variety of skills."

    surface = 'stone
    exits = [iron_gate -> 'north to guard_station, sandy_path -> 'west to beach_east,
             cobbled_lane -> 'east to pier, lib.entry_doorway -> 'south to dockmaster_shack]
}

// beach

def shiny_seashell: item {
    brief = "a shiny seashell"
    description = |
        The seashell's polished surface is covered with an intricate pattern of
        white and orange whorls.
    alts = ["a shiny shell"]
    stack_limit = 10
    size = 'tiny

    when take(actor, self, source) {
        spawn(shiny_seashell, source, random(1800, 7200))
    }
}

def beach_portal: lib.continuing_portal {
    brief = "the beach"
}

def beach_location: isle_location {
    name = "Rocky Beach"
    description = "The sand on this narrow beach is full of pebbles and shell fragments."
    domain = 'outdoor
    surface = 'sand
}

deflocation beach_east: beach_location {
    exits = [beach_portal -> 'west to beach_center, sandy_path -> 'east to cobbled_square]
}

deflocation beach_center: beach_location {
    exits = [beach_portal -> 'west to beach_west, beach_portal -> 'east to beach_east]
}

deflocation beach_west: beach_location {
    exits = [beach_portal -> 'east to beach_center]
    contents = [shiny_seashell!]
}

// dockmaster_shack

def bundle_of_documents: item {
    brief = "a bundle[s] of documents"
    description = |
        The documents are rather mundane shipping records. A scrawled note on
        top reads, "Pay the messenger 10 silver. Q.M."
    quest = document_delivery
}

defquest document_delivery {
    name = "On to Arwyck"
    summary = |
        Deliver the dockmaster's documents to the surly stevedore at the
        Arwyck docks.
    required_quests = [kill_some_plants]

    phase active {
        summary = "Find the surly stevedore in Arwyck."
    }

    phase done {
        summary = "Give the documents to the surly stevedore."
    }
}

def dockmaster: lib.npc {
    brief = "the dockmaster"
    pose = "sits behind the desk."
    description = |
        The dockmaster is a grizzled man with a short salt-and-pepper beard. His
        left eye is covered with a leather patch, but his right eye harbors a
        dangerous gleam.
    offers_quests = [document_delivery]

    when talk(actor: .quest(document_delivery, available), self, topic) {
        tell(self, actor) |
            You there. I've an errand that needs doing if you've a mind to earn
            some coin.
        offer_quest(self, document_delivery, actor)
    }

    after accept_quest(actor, quest: document_delivery, self) {
        tell(self, actor) "Good, good. Take these."

        receive_items(actor, [bundle_of_documents], self)

        tell(self, actor) |
            I need you to deliver those to my man in Arwyck. Surly fellow near
            the docks. Can't miss him. He'll pay you once he has the documents.
            The ship to Arwyck leaves from the dock outside.
    }

    when talk(actor: .quest(document_delivery, active), self, topic) {
        tell(self, actor) |
            What are you doing here? My man needs those documents. The *Siren*
            departs for Arwyck from the dock just east of here.
    }

    when talk(actor: .quest(document_delivery, complete), self, topic) {
        tell(self, actor) |
            Thanks for helping me out before. I might have more errands for you
            in the future; be sure to check back.
    }
}

def desktop_documents: fixture {
    brief = "document"
    description = |
        You discreetly scan the papers on top of the pile. They appear to be
        schedules, manifests, and other such shipping-related documents.
    is_obvious = false
}

def wine_bottles: fixture {
    brief = "wine bottle"
    description = |
        You may have been dead for hundreds of years, but wine hasn't changed
        all that much; you still recognize the cheap stuff when you see it.
    is_obvious = false
}

deflocation dockmaster_shack: isle_location {
    name = "Dockmaster's Shack"
    description = |
        This one-room structure is dominated by a large desk that is piled with
        documents and empty wine bottles.
    domain = 'indoor
    surface = 'wood
    contents = [dockmaster!, desktop_documents, wine_bottles]
    exits = [lib.exit_doorway -> 'north to cobbled_square,
             lib.stairway -> 'down to dockmaster_basement]
}

// dockmaster_basement

deflocation dockmaster_basement: isle_location {
    name = "Basement of the Dockmaster's Shack"
    description = |
        This low, damp space is more of a crawlspace than a basement. Several
        barrels and crates have been pushed into one corner of the dirt floor.
    domain = 'indoor
    surface = 'dirt
    exits = [lib.stairway -> 'up to dockmaster_shack]
}

// pier

def dock_sign: fixture {
    brief = "an informative sign"
    pose = "is posted here."
    description = |
        The sign indicates that a ship frequently arrives here to carry
        passengers across the sea to the village of Arwyck.
}

deflocation pier: isle_location {
    name = "Sturdy Pier"
    description = |
        This stone pier juts out into the sea, giving ships that visit the
        isle a safe place to dock.

    tutorial = |
        To board a ship for Arwyck, wait until it arrives and then move `east`.
        Once the ship reaches its destination, move `south` to disembark.

    surface = 'stone
    contents = [dock_sign]
    exits = [cobbled_lane -> 'west to cobbled_square]
}

def gangplank: portal {
    brief = "a gangplank"
}

def sailor: lib.npc {
    brief = "a grizzled sailor"
    description = |
        The sailor has a short, salt-and-pepper beard and wears a faded uniform.
        His forearms are unusually burly.

    when talk(actor, self, topic) {
        tell(self, actor) |
            Ahoy! Welcome aboard the *Siren*. Every few moments we make the
            short run between Arwyck and the Isle of Dawn. Relax and enjoy the
            trip!
    }
}

deflocation the_siren: lib.route_follower {
    name = "The *Siren*"
    description = |
        This sturdy single-masted vessel makes frequent trips between the Isle
        of Dawn and the village of Arwyck on the mainland.
    domain = 'outdoor
    surface = 'wood
    surrounding = 'water
    icon = 'boat
    contents = [sailor]

    route = [gangplank -> 'west to pier, gangplank -> 'south to arwyck.west_dock]
}
