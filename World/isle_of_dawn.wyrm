// This is the starter zone for new characters. It is meant as a basic
// introduction to the game and tutorial for vital mechanics.

// TODO: region

def isle_location: location {
    // FIXME: these should be symbols
    domain = "outdoor"
    surface = "grass"
}

def gravel_path: portal {
    brief = "a gravel path"
    description = |
        The path's surface of finely crushed white stone contrasts with the lush
        greenery which surrounds you.
}

// hilltop

def standing_stones: fixture {
    brief = "ring of standing stones"
    description = |
        You count nine stones, each about 12 feet tall and four feet wide. The
        faint remains of ornate tracery are barely visible upon their weathered
        surfaces.
    is_obvious = false
}

deflocation hilltop: isle_location {
    name = "Hilltop"
    description = |
        You are standing atop a low hill in the center of a small island. A ring
        of ancient standing stones encircles the crown of the hill. The long
        grass that covers the hillside sways back and forth in the gentle
        breeze.

    tutorial = |
        Welcome to Atalea! As a new player, you will sometimes see green text
        like this. These messages provide tips to help you get started. For
        details, type `help tutorial`.

        A few basics: to move around the world, type the direction you want to
        go. For example, type `south` or `s` to move south. To look at your
        surroundings, type `look`. To look at something specific, add its name
        or description. For example, try `look standing stones` or `look self`.

        Head `south` to begin your adventure!

    contents = [standing_stones!]
    exits = [gravel_path -> 'south to pavilion]

    when start_world() {
        log_debug(self, "it's happening!")
    }
}

// pavilion

def spirit_warden: lib.npc {
    brief = "the spirit warden"
    pose = "stands nearby, smiling amiably."
    description = |
        The spirit warden is an elderly human man, standing well over six feet
        tall. His long white hair and wispy beard frame a wrinkled, grinning
        face. He wears dark blue robes with gold embroidered trim.

    after enter_location(actor, location, entry) {
        // FIXME: await sleep(3)
        show(actor, "The spirit warden beckons in your direction.")
    }

    when talk(actor, target: self, topic) {
        tell(self, actor) |
            Welcome to Atalea, hero! Or perhaps I should say "welcome back..."

            I don't know how to explain this, but you died long ago. My
            condolences. For reasons unknown, however, you have been recalled
            from the Dreamlands and once again walk in the physical world.

            My colleagues stand ready to help reorient you after your long
            absence. As you explore this isle, talk to anyone you meet; we are
            all here to help.

            To the south you will meet an odd creature who will get you started.
            Head that way when you are ready.
    }
}

deflocation pavilion: isle_location {
    name = "Pavilion"
    description = |
        An open-air pavilion stands a few feet from the path. Its silk canopy is
        painted in bright colors.

    tutorial = |
        You will often encounter creatures with whom you can interact. They may
        provide useful information or offer rewards if you perform actions on
        their behalf. For example, type `talk warden` to talk to the spirit
        warden. He may have something interesting to say.

    contents = [spirit_warden!]
    exits = [gravel_path -> 'north to hilltop, gravel_path -> 'south to wildflower_field]
}

// wildflower_field

defquest choose_a_race {
    name = "Let's Get Physical"
    summary = |
        Choose your physical form by meditating at one of the racial shrines on
        the Isle of Dawn, then return to the officious kobold.

    phase active {
        summary = "Meditate at any of the racial shrines on the Isle of Dawn."
    }

    phase done {
        summary = "Return to the officious kobold."
    }
}

def officious_kobold: lib.npc {
    brief =  "an officious kobold"
    pose = "sits at a low table in the shade of a large umbrella."
    description = |
        The kobold is a tiny humanoid with reptilian features, sparse wiry hair,
        and knobbly gray skin. It is, however, impeccably groomed.
    offers_quests = [choose_a_race]

    when talk(actor: .quest(choose_a_race, available), self, topic) {
        tell(self, actor) |
            Hello, friend! As you may have noticed, your current body is just a
            ghostly manifestation of your spirit. To fix that you'll need to
            select a race and take on a physical form. It just so happens I can
            help you do exactly that!

        offer_quest(self, choose_a_race, actor)

        show_tutorial(actor, 'offer_quest) |
            The kobold is offering you a quest! Quests are tasks set for you by
            the denizens of the world. Completing them can provide you with many
            kinds of rewards. Type `help quests` for more information.
    }

    after accept_quest(actor, quest: choose_a_race, self) {
        tell(self, actor) |
            Excellent! To the west you will find several shrines, each dedicated
            to a different race. Talk to the caretaker at each shrine to learn
            more about his or her people.

            Then, when you find the race that's right for you, return to the
            selected shrine and `meditate`. The caretaker will, ahem, take care
            of the rest.

            Return to me once you have completed this task.

        show_tutorial(actor, 'accept_quest) |
            You can use the `quest` command to see the quests you've accepted
            and track your progress toward their completion.
    }

    when talk(actor: .quest(choose_a_race, active), self, topic) {
        tell(self, actor) |
            Have you selected a race yet? The caretakers to the west will be
            more than happy to describe their races and help you make the right
            decision.
    }

    when talk(actor: .quest(choose_a_race, done), self, topic) {
        tell(self, actor) |
            A fine choice! I had no doubt you would choose to become
            {actor.race:i}. I am something of an expert in these matters, after
            all.

            I can't help but notice that your new body, while quite lovely, is
            also quite naked. Aren't you cold? To the south you will find my
            friend Dhalia, the seamstress; talk to her and she will make sure
            you go forth in style.

        complete_quest(actor, choose_a_race)
    }

    when talk(actor, self, topic) {
        tell(self, actor) |
            Good to see you again! You may have heard that some of my kind have
            occupied an old copper mine, deep in the forest west of Arwyck. I
            assure you I have nothing whatsoever to do with those filthy
            creatures, despite our shared ancestry.
    }
}

deflocation wildflower_field: isle_location {
    name = "Field of Wildflowers"
    description = |
        Flowers of every color and description bloom in the expansive fields
        along the sides of the path. The air is heavy with their fragrance.
    surface = 'flowers

    tutorial = |
        The ! symbol on the map means that a creature wants to talk to you about
        an available quest. You can `talk` to the creature to learn more. When
        you see the &#x22ef; symbol, you can `talk` to the creature about a quest
        you have accepted but not yet completed. If you see the &#x2713; symbol,
        then you have completed a quest and can `talk` to the creature to
        receive your rewards!

        The kobold has a quest for you. Try typing `talk kobold`.

    contents = [officious_kobold!]
    exits = [gravel_path -> 'north to pavilion, gravel_path -> 'south to clothing_stall,
             gravel_path -> 'west to human_shrine]
}

// human_shrine

def human_caretaker: lib.npc {
    brief = "the human caretaker"
    pose = "stands nearby with a welcoming expression."
    description = |
        The caretaker is a tall, athletic woman wearing a practical leather
        outfit and a broad-brimmed hat. Various gardening tools hang from her
        wide leather belt.

    when talk(actor: .quest(choose_a_race, active), self, topic) {
        tell(self, actor) |
            Hello, traveler. I imagine you are curious about humans. Here is
            what I can tell you.

            First and foremost, humans are known for their optimism and their
            adaptability. We feel like we can do anything, and do it well.
            Perhaps you've heard the expression, "Jack of all trades, master of
            none?" Some might consider it a negative, but we humans take pride
            in our ability to do a little bit of everything.

            Second, humans are especially noted for their skill as gatherers and
            farmers. We are adept at using our ingenuity to extract the bounty
            of the earth.

            If you want to join humankind, `meditate` here. I will then use the
            power of the shrine to complete your transformation.
    }
}

deflocation human_shrine: isle_location {
    name = "Shrine of Humanity"
    description = |
        This part of the isle is a large garden. Plants bearing flowers, fruits,
        and vegetables are arranged in orderly rows. The soil is dark and
        fertile.
    contents = [human_caretaker!]
    exits = [gravel_path -> 'east to wildflower_field, gravel_path -> 'north to elven_shrine,
             gravel_path -> 'west to ogre_shrine]

    when meditate(actor: .quest(choose_a_race, active)) {
        show(actor) |
            A calming warmth suffuses your being. The caretaker smiles
            broadly as she reaches out to you with her open hand, holding it
            inches from your ghostly form. She smiles broadly as the warmth
            spreads to her hand.

            After a moment she closes her palm. You see a faint glow between
            her fingers which quickly grows brighter. When she opens her
            hand she holds a tiny seedling, its delicate leaves unfolding
            before your eyes.
        change_race(actor, lib.human)
        advance_quest(actor, choose_a_race, 'done)
    }

    when meditate(actor) {
        show(actor) "The caretaker nods in approval."
    }
}

// elven_shrine

def wooden_sculpture: fixture {
    brief = "a wooden sculpture"
    pose = "stands in the middle of the ring of trees."
    description = |
        The sculpture is carved from polished yellow wood. Its form is fluid and
        abstract but somehow evokes images of towering forest oaks and hidden
        woodland dells. Golden-brown moss grows in chaotic yet precise patterns
        along its sides. Atop the sculpture rests a shallow bowl made of green
        glass. The bowl contains clear, cold water.
}

def elven_caretaker: lib.npc {
    brief = "the elven caretaker"
    pose = "kneels beside one of the trees, her eyes closed."
    description = |
        The elven caretaker is a graceful young woman with striking emerald eyes
        and long, silver hair arranged in complex braids. She wears a pale green
        dress with embroidered trim.

    when talk(actor: .quest(choose_a_race, active), self, topic) {
        tell(self, actor) |
            Greetings, stranger. Be welcome in this place. No doubt you have
            come here to learn something about my people. I will tell you what I
            can.

            Mine are a peaceful, thoughtful people who love and respect nature.
            This was not always so; millenia ago we nearly destroyed ourselves
            with our prideful, warlike ways. It took a terrible crisis for my
            ancestors to change. I pray that we never slide back into those
            habits that nearly left us extinct.

            Elves are quick-footed and quick-witted, although we are not as
            strong as many of the other races of Atalea. We excel as hunters,
            magicians, bards, and---it pains me to say---as thieves. We consider
            ourselves custodians of the forest and take that charge very
            seriously. We do not stand idly by if our beloved home is
            threatened.

            If you would join my folk, simply `meditate` here to make your
            purpose known; the shrine's power will do the rest.
    }
}

deflocation elven_shrine: isle_location {
    name = "Shrine of the Forest"
    description = |
        A low wooden fence surrounds a perfect ring of thirteen graceful birch
        trees. The area radiates an aura of tranquility.
    surface = "forest"
    contents = [wooden_sculpture!, elven_caretaker!]
    exits = [gravel_path -> 'south to human_shrine, gravel_path -> 'north to sidhe_shrine,
             gravel_path -> 'west to goblin_shrine]

    when meditate(actor: .quest(choose_a_race, active)) {
        show(actor) |
            The caretaker approaches the nearby sculpture and raises her hands
            to the sky. Motes of light rise from the bowl atop the sculpture;
            they quickly become so bright you are forced to look away. A
            swirling wind rises and the trees begin to sway, their leaves
            glimmering in the light. Soon the motes move toward you, surrounding
            you with their light and warmth.

            After a few moments the wind dies down and the motes dissolve into
            tiny sparkling flecks which quickly disperse in the dying breeze.
            The clearing is calm once again.
        change_race(actor, lib.elf)
        advance_quest(actor, choose_a_race, 'done)
    }

    when meditate(actor) {
        show(actor) "The caretaker bows respectfully."
    }
}

// sidhe_shrine

def sidhe_caretaker: lib.npc {
    brief = "the sidhe caretaker"
    pose = "stands nearby, lost in thought."
    description = |
        The sidhe caretaker is a tall, gaunt man with a stern look. His long
        white hair is pulled back into a ponytail that nearly reaches the
        ground. He wears dark robes of a rather elaborate and archaic style.

    when talk(actor: .quest(choose_a_race, active), self, topic) {
        tell(self, actor) |
            Well, well. Another hero, reborn. I suppose I should tell you
            something of my race, although I find it unlikely you were fortunate
            enough to be a member of the Fair Folk in your past life.

            For uncounted millenia, my people lived in an alternate plane of
            existence called the Shadowlands. A few short centuries ago, war
            with demons drove us out of our homeland. We ended up here.

            At our core, we sidhe are creatures of magic. It is our very
            essence. Few sidhe have become famous warriors or minstrels,
            although of course it is possible. But all of our people have some
            small skill in magic, and many have become wizards of reknown.

            I cannot say it seems likely, but if you believe you are truly one
            of us then I encourage you to `meditate` before the shrine. If you
            are found worthy, I will welcome you into the fold.
    }
}

def alien_tree: fixture {
    brief = "a tree"
    description = |
        The tree is clearly very old. You get a strange sense that it does not
        belong in this world.
    is_obvious = false
}

def runed_boulder: fixture {
    brief = "a boulder"
    description = |
        Upon closer inspection, you notice that the entire surface of the
        boulder is covered with tiny rune-like markings.
    is_obvious = false
}

deflocation sidhe_shrine: isle_location {
    name = "Shrine of Shadows"
    description = |
        A lone tree grows atop an enormous granite boulder. Its gnarled, gray
        roots wrap around the stone before sinking into the fertile earth below.
        The tree's twisted branches splay outward and its dense leaves form a
        solid canopy that condemns this part of the isle to perpetual shadow.
    surface = "forest"
    contents = [sidhe_caretaker!, alien_tree!, runed_boulder!]
    exits = [gravel_path -> 'south to elven_shrine, gravel_path -> 'west to dwarven_shrine]

    when meditate(actor: .quest(choose_a_race, active)) {
        show(actor) |
            As you begin your meditation, the shadows in the area deepen. The
            leaves above begin to rustle, as if the tree is growing restless.

            You vision begins to blur. Shifting figures appear, ghosts of
            creatures from another world. They call to you in an alien language
            you have never heard.

            After a moment, you begin to understand their words. You answer
            their calls, but the meaning of your words is lost as soon as they
            are uttered. Apparently satisfied, the figures disappear; the
            shadows retreat.
        change_race(actor, lib.sidhe)
        advance_quest(actor, choose_a_race, 'done)
    }

    when meditate(actor) {
        show(actor) "The caretaker arches an eyebrow."
    }
}

// dwarven_shrine

def dwarven_caretaker: lib.npc {
    brief = "the dwarven caretaker"
    pose = "stands proudly amid the statues."
    description = |
        The dwarven caretaker stands about four feet tall, with shoulders nearly
        as wide. He wears full chain mail, even in the heat of the day. His
        armor appears to be of fine workmanship. A heavy maul hangs from his
        belt. His long, red beard falls across a belly that has seen a few pints
        of ale in its day.

    when talk(actor: .quest(choose_a_race, active), self, topic) {
        tell(self, actor) |
            Well met! If it's a dwarf ye wanna be, then ye be at tha
            right place. I kinna imagine wantin' ta be anythin' else!

              Me people may be wee, but we have tha strength of tha mountains
              within us! Aye, it's true, we have a great love for gold and gems.
              But we have nae great love for tha dark beasties that lurk below
              tha earth. We dwarves are great crafters and even greater at
              fightin', when tha times require it.

              If ye think that all sounds good, then get ta meditatin'!
    }
}

deflocation dwarven_shrine: isle_location {
    name = "Shrine of the Mountain"
    description = |
        Rows of stone statues stand in the tall grass, each depicting a stout
        warrior with a grim expression and glowing amber eyes. The statues are
        arrayed in formation like soldiers marching to battle.
    contents = [dwarven_caretaker!]
    exits = [gravel_path -> 'east to sidhe_shrine, gravel_path -> 'south to goblin_shrine]

    when meditate(actor: .quest(choose_a_race, active)) {
        show(actor) |
            The caretaker grasps his maul with both hands and holds it out
            before him. After a moment the hammer begins to vibrate and erupts
            with amber light, echoing the statues' eyes. The vibrations grow
            stronger and emanate outward from the caretaker's body. Soon the
            entire area is shaking and the statues begin to rock back and forth.

            A powerful voice intones, "You have chosen. So be it. Strong as
            stone, bright as steel. May you bring honor to clan and king."

            Without warning the shaking stops and the light dissipates.
        change_race(actor, lib.dwarf)
        advance_quest(actor, choose_a_race, 'done)
    }

    when meditate(actor) {
        show(actor) "The caretaker joins you in silent reflection."
    }
}

// goblin_shrine

def chessboard: fixture {
    brief = "a stone chessboard"
    pose = "rests atop a low table."
    description = |
        The chessboard is remarkable for its pieces: each is a finely detailed
        and garishly-painted rendition of a creature who looks much like the
        caretaker. The pieces are so realistic they seem almost alive.
    is_obvious = false
}

def goblin_caretaker: lib.npc {
    brief = "the goblin caretaker"
    pose = "stands beside a chessboard, apparently pondering his next move."
    description = |
        The caretaker is a short, big-eared creature with greenish-blue skin. In
        contrast with his somewhat comical proportions and garish attire, his
        large dark eyes evince a keen intellect.

    when talk(actor: .quest(choose_a_race, active), self, topic) {
        tell(self, actor) |
            Hello, friend! I can't tell you how happy I am to see your interest
            in goblinkind. We are a misunderstood folk! Let me set the record
            straight.

            Goblins are small in stature but we have big dreams. Mostly dreams
            of wealth, it's true, but there's nothing wrong with a little
            spending cash, eh?

            Some larger folks will tell you we are thieves, beggars, and worse.
            That is so mostly untrue! The majority of us would rather get rich
            through shrewd business practices and hard bargaining than by using
            less savory methods.

            When those ignorant louts take offense at our methods, it certainly
            helps that we're quick and stealthy by nature. You won't see many
            goblins waving huge swords around, but as they say, \"Size isn't
            everything!\"

            If you feel like you're one of us at heart, why not become one of us
            in body, too? Just `meditate` here and the deed will be done.
    }
}

deflocation goblin_shrine: isle_location {
    name = "Shrine of Fortune"
    description = |
        The ground here has been cleared, leveled, and surfaced with
        multi_colored bricks.
    surface = "stone"
    contents = [chessboard!, goblin_caretaker!]
    exits = [gravel_path -> 'north to dwarven_shrine, gravel_path -> 'south to ogre_shrine,
             gravel_path -> 'east to elven_shrine]

    when meditate(actor: .quest(choose_a_race, active)) {
        show(actor) |
            As soon as you close your eyes, you have a vision of the world
            around you getting larger...or are you getting smaller? For a moment
            you are stricken with vertigo as the world shifts and spins.

            Once the dizziness passes, you open your eyes to find that your
            stature and greenish skin now match those of the caretaker.
        change_race(actor, lib.goblin)
        tell(self, actor) "Huzzah! Welcome to the family!"
        advance_quest(actor, choose_a_race)
    }

    when meditate(actor) {
        show(actor) "The caretaker leaves you to your meditation."
    }
}

// ogre_shrine

def ogre_caretaker: lib.npc {
    brief = "the ogre caretaker"
    pose = "is here, casually pulverizing rocks with his hammer."
    description = |
        The caretaker is a hulking figure, standing over eight feel tall. He
        wears an iron helm, iron gauntlets, and a breechclout. He carries an
        enormous iron sledgehammer.

    when talk(actor: .quest(choose_a_race, active), self, topic) {
        tell(self, actor) |
            Ugh. I be ogre of few words, but I know what you want. I tell you of
            my kin. We big. We strong. Done!

            You came to `meditate`? Ha. If you wanna be ogre, do it. Done!
    }
}

deflocation ogre_shrine: isle_location {
    name = "Shrine of Strength"
    description = |
        This area is choked with a haphazard collection of rough stone blocks,
        many overgrown with vines and twisting grasses. The blocks' surfaces
        have been crudely painted with scenes of carnage featuring enormous
        warriors laying waste to their tiny assailants.
    surface = "stone"
    contents = [ogre_caretaker!]
    exits = [gravel_path -> 'north to goblin_shrine, gravel_path -> 'east to human_shrine]

    when meditate(actor: .quest(choose_a_race, active)) {
        show(actor) |
            The caretaker selects a boulder and tosses it on the ground before
            you. He then steps over, raises his hammer, and crushes the rock as
            he lets out an enormous belly laugh.

            Rocks fly around. Muscles grow. Brain shrink.
        change_race(actor, lib.ogre)
        advance_quest(actor, choose_a_race)
    }

    when meditate(actor) {
        show(actor) "The caretaker chuckles and crushes another boulder."
    }
}

// clothing_stall

def simple_shirt: lib.shirt {
    brief = "a simple cotton shirt"
    description = |
        The shirt is well-made and comfortable if not entirely fashionable.
}

def simple_pants: lib.pants {
    brief = "a pair of cotton pants"
    description = |
        The pants are made of thick brown cloth. They have been patched only a
        handful of times.
}

def canvas_shoes: lib.shoes {
    brief = "a pair of canvas shoes"
    description = |
        These low shoes have a sturdy sole. They seem suitable for walking
        long distances.
}

def small_backpack: lib.backpack {
    brief = "a small canvas backpack"
    description = |
        The backpack has wide leather straps and a drawstring closure.
}

defquest get_some_clothes {
    name = "Cover Up"
    summary = |
        Pick a white tulip for Dhalia, then exchange it for a set of clothes.
    required_quests = [choose_a_race]
    awarded_items = [simple_shirt, simple_pants, canvas_shoes, small_backpack]

    phase active {
        summary = "Pick a white tulip from the fields east of the clothing stall."
    }

    phase done {
        summary = "Return the tulip to Dhalia."
    }
}

def seamstress: lib.npc {
    brief = "Dhalia"
    pose = "stands in the stall, organizing her wares."
    description = |
        Dhalia is a human woman of indeterminate age. She wears silver-rimmed
        spectacles and an impeccably-tailored dress decorated with a floral
        pattern.
    offers_quests = [get_some_clothes]

    when talk(actor: .quest(get_some_clothes, available), self, topic) {
        tell(self, actor) |
            Greetings! Did our mutual kobold friend send you my way? It
            certainly seems you have need of my wares. I will happily provide
            you with an outfit that should serve your needs, but I must ask a
            favor in return.
        offer_quest(self, get_some_clothes, actor)
    }

    after accept_quest(actor, quest: get_some_clothes, self) {
        tell(self, actor) |
            Wonderful! You see, I am very fond of white tulips, but my work here
            prevents me from taking the time to gather them. Would you head to
            the east and get one for me?
    }

    when talk(actor: .quest(get_some_clothes, active), self, topic) {
        tell(self, actor) |
            Have you found a white tulip for me? They're just to the east.
    }

    when talk(actor: .quest(get_some_clothes, done), self, topic) {
        tell(self, actor) |
            Why thank you, this tulip is lovely! Your timing is perfect; I have
            just finished selecting an outfit for you.

        complete_quest(actor, get_some_clothes)

        show_tutorial(actor, 'items) |
            The seamstress have given you several items; type `inventory` or
            `inv` to list them.

            To wear an item, use the `equip` command. For example, type `equip
            shirt`. Type just `equip` to list the items you currently have
            equipped.

            In addition to clothing, the seamstress also gave you a backpack.
            Equipping it will increase the number of items you can carry.

            For more information type `help equip` or `help inventory`.
    }
}

deflocation clothing_stall: isle_location {
    name = "Clothing Stall"
    description = |
        A wooden market stall has been erected beside the path. Its counter is
        piled with basic clothing items in myriad styles and sizes.
    contents = [seamstress!]
    exits = [gravel_path -> 'north to wildflower_field, gravel_path -> 'south to fountain_plaza,
             gravel_path -> 'east to tulip_field_sw]
}

// tulip_field

def white_tulip: item {
    brief = "a white tulip"
    pose = "draws your attention."
    description = |
        The tulip is quite lovely; you can see why Dhalia prizes them.
    size = 'small  // FIXME:
    entry_pose = "catches your eye."
    quest = get_some_clothes

    when take(actor, self, source) {
        spawn(white_tulip, source, 15)
        advance_quest(actor, get_some_clothes, 'done)
    }
}

def tulip_field: isle_location {
    name = "Field of Tulips"
    description = |
        Tulips in myriad colors have been planted here.
    surface = 'flowers
    contents = [white_tulip]
}

deflocation tulip_field_sw: tulip_field {
    tutorial = |
        Some items can be picked up using the `take` command. For example, type
        `take tulip` to take a white tulip when you see one. Picking up an item
        places it into your inventory. Use the `inventory` command to list the
        items you are carrying.
    exits = [gravel_path -> 'west to clothing_stall, gravel_path -> 'east to tulip_field_se,
             gravel_path -> 'north to tulip_field_nw]
}

deflocation tulip_field_se: tulip_field {
    exits = [gravel_path -> 'west to tulip_field_sw, gravel_path -> 'north to tulip_field_ne]
}

deflocation tulip_field_nw: tulip_field {
    exits = [gravel_path -> 'east to tulip_field_ne, gravel_path -> 'south to tulip_field_sw]
}

deflocation tulip_field_ne: tulip_field {
    exits = [gravel_path -> 'west to tulip_field_nw, gravel_path -> 'south to tulip_field_se]
}
